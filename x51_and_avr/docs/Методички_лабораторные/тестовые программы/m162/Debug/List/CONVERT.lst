##############################################################################
#                                                                            #
#                                                      22/Apr/2006  01:58:02 #
# IAR Atmel AVR C/C++ Compiler V4.12A/W32, Evaluation Version                #
# Copyright 1996-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  F:\Projects\VitalyIgorevich\Packet\src\m162\CONVERT.c   #
#    Command line =  F:\Projects\VitalyIgorevich\Packet\src\m162\CONVERT.c   #
#                    --cpu=m162 -ms -o F:\Projects\VitalyIgorevich\Packet\sr #
#                    c\m162\Debug\Obj\ -lCN F:\Projects\VitalyIgorevich\Pack #
#                    et\src\m162\Debug\List\ -y --initializers_in_flash -z9  #
#                    --cross_call_passes=2 --debug -e -I "E:\Program         #
#                    Files\IAR Systems\Embedded Workbench 4.0                #
#                    Evaluation\avr\INC\" -I "E:\Program Files\IAR           #
#                    Systems\Embedded Workbench 4.0                          #
#                    Evaluation\avr\INC\CLIB\" --eeprom_size 512             #
#    List file    =  F:\Projects\VitalyIgorevich\Packet\src\m162\Debug\List\ #
#                    CONVERT.lst                                             #
#    Object file  =  F:\Projects\VitalyIgorevich\Packet\src\m162\Debug\Obj\C #
#                    ONVERT.r90                                              #
#                                                                            #
#                                                                            #
##############################################################################

F:\Projects\VitalyIgorevich\Packet\src\m162\CONVERT.c
      1          #include "Convert.h"
      2          

   \                                 In segment CODE, align 2, keep-with-next
      3          unsigned char StringToByte( char* str )
   \                     StringToByte:
      4          {
   \   00000000   011C               MOVW    R3:R2, R25:R24
   \   00000002   0198               MOVW    R19:R18, R17:R16
      5          	register unsigned char value = 0, coeff = 1;
   \   00000004   E040               LDI     R20, 0
   \   00000006   E011               LDI     R17, 1
      6          	register signed char i, len;
      7          
      8          	for( len = 0; str[ len ] != 0; len++ );
   \   00000008   E000               LDI     R16, 0
   \   0000000A   C001               RJMP    ??StringToByte_0
   \                     ??StringToByte_1:
   \   0000000C   9503               INC     R16
   \                     ??StringToByte_0:
   \   0000000E   2F60               MOV     R22, R16
   \   00000010   2F70               MOV     R23, R16
   \   00000012   0F77               LSL     R23
   \   00000014   0B77               SBC     R23, R23
   \   00000016   01F9               MOVW    R31:R30, R19:R18
   \   00000018   0FE0               ADD     R30, R16
   \   0000001A   1FF7               ADC     R31, R23
   \   0000001C   8150               LD      R21, Z
   \   0000001E   2355               TST     R21
   \   00000020   F7A9               BRNE    ??StringToByte_1
      9          	
     10          	for( i = len - 1; i >= 0 && i >= len - 3; i-- )
   \   00000022   C00A               RJMP    ??StringToByte_2
     11          	{
     12          		value += ( str[ i ] - '0' ) * coeff;
   \                     ??StringToByte_3:
   \   00000024   01F9               MOVW    R31:R30, R19:R18
   \   00000026   0FE0               ADD     R30, R16
   \   00000028   1DF1               ADC     R31, R1
   \   0000002A   8150               LD      R21, Z
   \   0000002C   5350               SUBI    R21, 48
   \   0000002E   9F51               MUL     R21, R17
   \   00000030   0D40               ADD     R20, R0
     13          		coeff *= 10;
   \   00000032   E05A               LDI     R21, 10
   \   00000034   9F15               MUL     R17, R21
   \   00000036   2D10               MOV     R17, R0
     14          	}
   \                     ??StringToByte_2:
   \   00000038   950A               DEC     R16
   \   0000003A   2300               TST     R16
   \   0000003C   F04A               BRMI    ??StringToByte_4
   \   0000003E   2E00               MOV     R0, R16
   \   00000040   2E10               MOV     R1, R16
   \   00000042   0C11               LSL     R1
   \   00000044   0811               SBC     R1, R1
   \   00000046   01CB               MOVW    R25:R24, R23:R22
   \   00000048   9703               SBIW    R25:R24, 3
   \   0000004A   1608               CP      R0, R24
   \   0000004C   0619               CPC     R1, R25
   \   0000004E   F754               BRGE    ??StringToByte_3
     15          	
     16          	return value;
   \                     ??StringToByte_4:
   \   00000050   2F04               MOV     R16, R20
   \   00000052   01C1               MOVW    R25:R24, R3:R2
   \   00000054   9508               RET
     17          }
     18          

   \                                 In segment CODE, align 2, keep-with-next
     19          unsigned char ByteToString( unsigned char value, char* str )
   \                     ByteToString:
     20          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2E50               MOV     R5, R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
     21          	register unsigned char nIndex = 0, digit, startFlag = 0, d;
   \   00000008   E080               LDI     R24, 0
   \   0000000A   2444               CLR     R4
     22          
     23          	if( value != 0 )
   \   0000000C   2300               TST     R16
   \   0000000E   F0F1               BREQ    ??ByteToString_0
     24          		for( d = 100; d > 0; d /= 10 )
   \   00000010   E694               LDI     R25, 100
   \   00000012   C002               RJMP    ??ByteToString_1
     25          		{
     26          			if( startFlag || value >= d )
   \                     ??ByteToString_2:
   \   00000014   2044               TST     R4
   \   00000016   F411               BRNE    ??ByteToString_3
   \                     ??ByteToString_1:
   \   00000018   1659               CP      R5, R25
   \   0000001A   F080               BRCS    ??ByteToString_4
     27          			{
     28          				digit = value / d;
   \                     ??ByteToString_3:
   \   0000001C   2D05               MOV     R16, R5
   \   0000001E   2F49               MOV     R20, R25
   \   00000020   ........           CALL    ?UC_DIVMOD_L01
     29          				str[ nIndex++ ] = digit + '0';
   \   00000024   2F10               MOV     R17, R16
   \   00000026   5D10               SUBI    R17, 208
   \   00000028   E030               LDI     R19, 0
   \   0000002A   01FD               MOVW    R31:R30, R27:R26
   \   0000002C   0FE8               ADD     R30, R24
   \   0000002E   1FF3               ADC     R31, R19
   \   00000030   8310               ST      Z, R17
   \   00000032   9583               INC     R24
     30          				value -= digit * d;
   \   00000034   9F09               MUL     R16, R25
   \   00000036   1850               SUB     R5, R0
     31          				startFlag = 1;
   \   00000038   2444               CLR     R4
   \   0000003A   9443               INC     R4
     32          			}
     33          		}
   \                     ??ByteToString_4:
   \   0000003C   2F09               MOV     R16, R25
   \   0000003E   E04A               LDI     R20, 10
   \   00000040   ........           CALL    ?UC_DIVMOD_L01
   \   00000044   2F90               MOV     R25, R16
   \   00000046   2300               TST     R16
   \   00000048   F021               BREQ    ??ByteToString_5
   \   0000004A   CFE4               RJMP    ??ByteToString_2
     34          	else
     35          		str[ nIndex++ ] = '0';
   \                     ??ByteToString_0:
   \   0000004C   E300               LDI     R16, 48
   \   0000004E   930C               ST      X, R16
   \   00000050   E081               LDI     R24, 1
     36          			
     37          	str[ nIndex ] = 0;
   \                     ??ByteToString_5:
   \   00000052   E000               LDI     R16, 0
   \   00000054   0FA8               ADD     R26, R24
   \   00000056   1FB0               ADC     R27, R16
   \   00000058   01FD               MOVW    R31:R30, R27:R26
   \   0000005A   8300               ST      Z, R16
     38          	
     39          	return nIndex;
   \   0000005C   2F08               MOV     R16, R24
   \   0000005E   E0E6               LDI     R30, 6
   \   00000060   ........           JMP     ?EPILOGUE_B6_L09
     40          }
     41          

   \                                 In segment CODE, align 2, keep-with-next
     42          unsigned char ShortToString( signed short value, char str[] )
   \                     ShortToString:
     43          {
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   0128               MOVW    R5:R4, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
     44          	register unsigned char nIndex = 0, digit, startFlag = 0;
   \   00000008   E080               LDI     R24, 0
   \   0000000A   E090               LDI     R25, 0
     45          	register signed short d;
     46          	
     47          	if( value < 0 )
   \   0000000C   2311               TST     R17
   \   0000000E   F43A               BRPL    ??ShortToString_0
     48          	{
     49          		str[ nIndex++ ] = '-';
   \   00000010   E20D               LDI     R16, 45
   \   00000012   01F9               MOVW    R31:R30, R19:R18
   \   00000014   8300               ST      Z, R16
   \   00000016   E081               LDI     R24, 1
     50          		value *= -1;
   \   00000018   9451               NEG     R5
   \   0000001A   9441               NEG     R4
   \   0000001C   0A59               SBC     R5, R25
     51          	}
     52          
     53          	if( value != 0 )
   \                     ??ShortToString_0:
   \   0000001E   2D04               MOV     R16, R4
   \   00000020   2905               OR      R16, R5
   \   00000022   F151               BREQ    ??ShortToString_1
     54          		for( d = 10000; d > 0; d /= 10 )
   \   00000024   E100               LDI     R16, 16
   \   00000026   2E60               MOV     R6, R16
   \   00000028   E207               LDI     R16, 39
   \   0000002A   2E70               MOV     R7, R16
   \   0000002C   C002               RJMP    ??ShortToString_2
     55          		{
     56          			if( startFlag || value >= d )
   \                     ??ShortToString_3:
   \   0000002E   2399               TST     R25
   \   00000030   F419               BRNE    ??ShortToString_4
   \                     ??ShortToString_2:
   \   00000032   1446               CP      R4, R6
   \   00000034   0457               CPC     R5, R7
   \   00000036   F0A4               BRLT    ??ShortToString_5
     57          			{
     58          				digit = value / d;
   \                     ??ShortToString_4:
   \   00000038   0182               MOVW    R17:R16, R5:R4
   \   0000003A   01A3               MOVW    R21:R20, R7:R6
   \   0000003C   ........           CALL    ?SS_DIVMOD_L02
     59          				str[ nIndex++ ] = digit + '0';
   \   00000040   2F10               MOV     R17, R16
   \   00000042   5D10               SUBI    R17, 208
   \   00000044   E090               LDI     R25, 0
   \   00000046   01F9               MOVW    R31:R30, R19:R18
   \   00000048   0FE8               ADD     R30, R24
   \   0000004A   1FF9               ADC     R31, R25
   \   0000004C   8310               ST      Z, R17
   \   0000004E   9583               INC     R24
     60          				value -= digit * d;
   \   00000050   2F40               MOV     R20, R16
   \   00000052   E050               LDI     R21, 0
   \   00000054   0183               MOVW    R17:R16, R7:R6
   \   00000056   ........           CALL    ?S_EC_MUL_L02
   \   0000005A   1A40               SUB     R4, R16
   \   0000005C   0A51               SBC     R5, R17
     61          				startFlag = 1;
   \   0000005E   E091               LDI     R25, 1
     62          			}
     63          		}
   \                     ??ShortToString_5:
   \   00000060   0183               MOVW    R17:R16, R7:R6
   \   00000062   E04A               LDI     R20, 10
   \   00000064   E050               LDI     R21, 0
   \   00000066   ........           CALL    ?SS_DIVMOD_L02
   \   0000006A   0138               MOVW    R7:R6, R17:R16
   \   0000006C   E001               LDI     R16, 1
   \   0000006E   1660               CP      R6, R16
   \   00000070   E000               LDI     R16, 0
   \   00000072   0670               CPC     R7, R16
   \   00000074   F03C               BRLT    ??ShortToString_6
   \   00000076   CFDB               RJMP    ??ShortToString_3
     64          	else
     65          		str[ nIndex++ ] = '0';
   \                     ??ShortToString_1:
   \   00000078   E300               LDI     R16, 48
   \   0000007A   01F9               MOVW    R31:R30, R19:R18
   \   0000007C   0FE8               ADD     R30, R24
   \   0000007E   1FF9               ADC     R31, R25
   \   00000080   8300               ST      Z, R16
   \   00000082   9583               INC     R24
     66          			
     67          	str[ nIndex ] = 0;
   \                     ??ShortToString_6:
   \   00000084   E000               LDI     R16, 0
   \   00000086   0FA8               ADD     R26, R24
   \   00000088   1FB0               ADC     R27, R16
   \   0000008A   930C               ST      X, R16
     68          	
     69          	return nIndex;
   \   0000008C   2F08               MOV     R16, R24
   \   0000008E   E0E8               LDI     R30, 8
   \   00000090   ........           JMP     ?EPILOGUE_B8_L09
     70          }

   Maximum stack usage in bytes:

     Function      CSTACK RSTACK
     --------      ------ ------
     ByteToString      6      4
     ShortToString     8      4
     StringToByte      0      2


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     StringToByte     86
     ByteToString    100
     ShortToString   148

 
 334 bytes in segment CODE
 
 334 bytes of CODE memory

Errors: none
Warnings: none
