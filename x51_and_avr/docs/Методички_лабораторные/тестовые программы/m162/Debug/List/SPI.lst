##############################################################################
#                                                                            #
#                                                      22/Apr/2006  01:58:06 #
# IAR Atmel AVR C/C++ Compiler V4.12A/W32, Evaluation Version                #
# Copyright 1996-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  F:\Projects\VitalyIgorevich\Packet\src\m162\SPI.c       #
#    Command line =  F:\Projects\VitalyIgorevich\Packet\src\m162\SPI.c       #
#                    --cpu=m162 -ms -o F:\Projects\VitalyIgorevich\Packet\sr #
#                    c\m162\Debug\Obj\ -lCN F:\Projects\VitalyIgorevich\Pack #
#                    et\src\m162\Debug\List\ -y --initializers_in_flash -z9  #
#                    --cross_call_passes=2 --debug -e -I "E:\Program         #
#                    Files\IAR Systems\Embedded Workbench 4.0                #
#                    Evaluation\avr\INC\" -I "E:\Program Files\IAR           #
#                    Systems\Embedded Workbench 4.0                          #
#                    Evaluation\avr\INC\CLIB\" --eeprom_size 512             #
#    List file    =  F:\Projects\VitalyIgorevich\Packet\src\m162\Debug\List\ #
#                    SPI.lst                                                 #
#    Object file  =  F:\Projects\VitalyIgorevich\Packet\src\m162\Debug\Obj\S #
#                    PI.r90                                                  #
#                                                                            #
#                                                                            #
##############################################################################

F:\Projects\VitalyIgorevich\Packet\src\m162\SPI.c
      1          #include "SPI.h"

   \                                 In segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x2f
   \   union <unnamed> volatile __io _A_SPDR
   \                     _A_SPDR:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_SPSR
   \                     _A_SPSR:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x2d
   \   union <unnamed> volatile __io _A_SPCR
   \                     _A_SPCR:
   \   00000000                      DS 1
      2          
      3          // Функция инициализации SPI-интерфейса

   \                                 In segment CODE, align 2, keep-with-next
      4          void SPI_init()
   \                     SPI_init:
      5          {
      6          	SPI_MOSI_DDR = 1;		// MOSI настроен как выход
   \   00000000   9ABD               SBI     0x17, 0x05
      7          	SPI_MISO_DDR = 0;		// MISO настроен как вход
   \   00000002   98BE               CBI     0x17, 0x06
      8          	SPI_SCK_DDR = 1;		// SCK настроен как выход
   \   00000004   9ABF               SBI     0x17, 0x07
      9          	SPI_SS_DDR = 1;			// SS настроен как выход
   \   00000006   9ABC               SBI     0x17, 0x04
     10          	SPI_SS = 1;
   \   00000008   9AC4               SBI     0x18, 0x04
     11          
     12          	SPCR = 0x5C;			// Включаем SPI: режим ведущий, порядок загрузки регистра
   \   0000000A   E50C               LDI     R16, 92
   \   0000000C   B90D               OUT     0x0D, R16
     13          							// от старшего бита к младшему
     14          }
   \   0000000E   9508               RET
     15          
     16          // Функция записи/чтения данных

   \                                 In segment CODE, align 2, keep-with-next
     17          unsigned char SPI_rw(const unsigned char w_data)
   \                     SPI_rw:
     18          {
     19          	SPDR = w_data;			//	Заполняем SPI буфер
   \   00000000   B90F               OUT     0x0F, R16
     20          	while(!(SPSR & 0x80));	// Ждем пока передача данных будет завершена
   \                     ??SPI_rw_0:
   \   00000002   9B77               SBIS    0x0E, 0x07
   \   00000004   CFFE               RJMP    ??SPI_rw_0
     21          	return SPDR;
   \   00000006   B10F               IN      R16, 0x0F
   \   00000008   9508               RET
     22          }
     23          
     24          

   Maximum stack usage in bytes:

     Function CSTACK RSTACK
     -------- ------ ------
     SPI_init     0      2
     SPI_rw       0      2


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     _A_PORTB          1
     _A_DDRB           1
     _A_SPDR           1
     _A_SPSR           1
     _A_SPCR           1
     SPI_init         16
     SPI_rw           10

 
  5 bytes in segment ABSOLUTE
 26 bytes in segment CODE
 
 26 bytes of CODE memory
  0 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none
