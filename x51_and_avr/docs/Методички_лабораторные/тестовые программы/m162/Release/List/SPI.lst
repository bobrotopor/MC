##############################################################################
#                                                                            #
#                                                      28/Jun/2007  00:57:53 #
# IAR Atmel AVR C/C++ Compiler V4.10A/W32, Evaluation Version                #
# Copyright 1996-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  D:\stend\src\m162\SPI.c                                 #
#    Command line =  --cpu=m162 -ms -o D:\stend\src\m162\Release\Obj\ -D     #
#                    NDEBUG -lcN D:\stend\src\m162\Release\List\ -lb         #
#                    D:\stend\src\m162\Release\List\ -y                      #
#                    --initializers_in_flash -z9 -e -I "D:\Program           #
#                    Files\IAR Systems\AVR4.10A\avr\INC\" -I "D:\Program     #
#                    Files\IAR Systems\AVR4.10A\avr\INC\CLIB\"               #
#                    --eeprom_size 512 D:\stend\src\m162\SPI.c               #
#    List file    =  D:\stend\src\m162\Release\List\SPI.lst                  #
#    Object file  =  D:\stend\src\m162\Release\Obj\SPI.r90                   #
#                                                                            #
#                                                                            #
##############################################################################

D:\stend\src\m162\SPI.c
      1          #include "SPI.h"
      2          
      3          // Функция инициализации SPI-интерфейса
      4          void SPI_init()
      5          {
      6          	SPI_MOSI_DDR = 1;		// MOSI настроен как выход
      7          	SPI_MISO_DDR = 0;		// MISO настроен как вход
      8          	SPI_SCK_DDR = 1;		// SCK настроен как выход
      9          	SPI_SS_DDR = 1;			// SS настроен как выход
     10          	SPI_SS = 1;
     11          
     12          	SPCR = 0x5C;			// Включаем SPI: режим ведущий, порядок загрузки регистра
     13          							// от старшего бита к младшему
     14          }
     15          
     16          // Функция записи/чтения данных
     17          unsigned char SPI_rw(const unsigned char w_data)
     18          {
     19          	SPDR = w_data;			//	Заполняем SPI буфер
     20          	while(!(SPSR & 0x80));	// Ждем пока передача данных будет завершена
     21          	return SPDR;
     22          }
     23          
     24          

   Maximum stack usage in bytes:

     Function CSTACK RSTACK
     -------- ------ ------
     SPI_init     0      2
     SPI_rw       0      2


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     SPI_init         16
     SPI_rw           10
     _A_PORTB          1
     _A_DDRB           1
     _A_SPDR           1
     _A_SPSR           1
     _A_SPCR           1

 
  5 bytes in segment ABSOLUTE
 26 bytes in segment CODE
 
 26 bytes of CODE memory
  0 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none
