//////////////////////////////////////////////////////////////////////////////
//                                                                           /
//                                                     21/May/2007  11:45:18 /
// IAR Atmel AVR C/C++ Compiler V4.10A/W32, Evaluation Version               /
// Copyright 1996-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  D:\stend\src\m16\DS1307.c                              /
//    Command line =  --cpu=m16 -mt -o D:\stend\src\m16\Release\Obj\ -D      /
//                    NDEBUG -lb D:\stend\src\m16\Release\List\              /
//                    --initializers_in_flash -z9 -e -I "D:\Program          /
//                    Files\IAR Systems\AVR4.10A\avr\INC\" -I "D:\Program    /
//                    Files\IAR Systems\AVR4.10A\avr\INC\CLIB\"              /
//                    --eeprom_size 512 D:\stend\src\m16\DS1307.c            /
//    List file    =  D:\stend\src\m16\Release\List\DS1307.s90               /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME DS1307

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?UC_DIVMOD_L01
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: TINY_I>`
        PUBLIC ByteToBCD
        PUBLIC Clock_Init
        PUBLIC DS1307_getdate
        PUBLIC DS1307_gettime
        PUBLIC DS1307_read
        PUBLIC DS1307_setdate
        PUBLIC DS1307_settime
        PUBLIC DS1307_write
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR

        EXTERN I2C_start
        EXTERN I2C_write
        EXTERN I2C_stop
        EXTERN delay_func_mcs
        EXTERN I2C_read


        RSEG TINY_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: TINY_I>`
Clock_Init:
        DS 7
        REQUIRE `?<Initializer for Clock_Init>`

        RSEG CODE:CODE:NOROOT(1)
DS1307_write:
        ST	-Y, R25
        ST	-Y, R24
        MOV	R25, R16
        MOV	R24, R17
        RCALL	?Subroutine3
??CrossCallReturnLabel_4:
        LDI	R16, 208
        RCALL	?Subroutine9
??CrossCallReturnLabel_16:
        MOV	R16, R25
        RCALL	?Subroutine2
??CrossCallReturnLabel_1:
        REQUIRE ?Subroutine13
        ;		// Fall through to label ?Subroutine13

        RSEG CODE:CODE:NOROOT(1)
?Subroutine13:
        LD	R24, Y+
        LD	R25, Y+
        RET

        RSEG CODE:CODE:NOROOT(1)
DS1307_read:
        ST	-Y, R24
        MOV	R24, R16
        RCALL	?Subroutine3
??CrossCallReturnLabel_3:
        LDI	R16, 208
        RCALL	?Subroutine2
??CrossCallReturnLabel_0:
        LDI	R16, 141
        LDI	R17, 0
        CALL	delay_func_mcs
        RCALL	?Subroutine3
??CrossCallReturnLabel_2:
        LDI	R16, 209
        RCALL	?Subroutine9
??CrossCallReturnLabel_15:
        CALL	I2C_read
        MOV	R24, R16
        CALL	I2C_stop
        MOV	R16, R24
        LD	R24, Y+
        RET

        RSEG CODE:CODE:NOROOT(1)
?Subroutine9:
        JMP	I2C_write

        RSEG CODE:CODE:NOROOT(1)
?Subroutine3:
        JMP	I2C_start

        RSEG CODE:CODE:NOROOT(1)
?Subroutine2:
        RCALL	?Subroutine9
??CrossCallReturnLabel_14:
        MOV	R16, R24
        RCALL	?Subroutine9
??CrossCallReturnLabel_13:
        JMP	I2C_stop

        RSEG CODE:CODE:NOROOT(1)
DS1307_gettime:
        ST	-Y, R26
        ST	-Y, R24
        MOV	R26, R16
        LDI	R16, 2
        RCALL	?Subroutine1
??CrossCallReturnLabel_32:
        ST	Z, R16
        ANDI	R24, 0x0F
        SUBI	R24, 208
        STD	Z+1, R24
        LDI	R16, 58
        STD	Z+2, R16
        LDI	R16, 1
        RCALL	?Subroutine1
??CrossCallReturnLabel_33:
        STD	Z+3, R16
        ANDI	R24, 0x0F
        SUBI	R24, 208
        STD	Z+4, R24
        LDI	R16, 58
        STD	Z+5, R16
        LDI	R16, 0
        RCALL	?Subroutine11
??CrossCallReturnLabel_24:
        MOV	R24, R16
        BST	R24, 7
        BRTC	??CrossCallReturnLabel_20
        LDI	R17, 0
        RCALL	?Subroutine6
??CrossCallReturnLabel_20:
        MOV	R16, R24
        RCALL	??Subroutine1_0
??CrossCallReturnLabel_34:
        STD	Z+6, R16
        ANDI	R24, 0x0F
        SUBI	R24, 208
        STD	Z+7, R24
        STD	Z+8, R31
        LD	R24, Y+
        REQUIRE ?Subroutine15
        ;		// Fall through to label ?Subroutine15

        RSEG CODE:CODE:NOROOT(1)
?Subroutine15:
        LD	R26, Y+
        RET

        RSEG CODE:CODE:NOROOT(1)
?Subroutine1:
        RCALL	?Subroutine11
??CrossCallReturnLabel_23:
        MOV	R24, R16
??Subroutine1_0:
        SWAP	R16
        RCALL	?Subroutine12
??CrossCallReturnLabel_28:
        REQUIRE ?Subroutine14
        ;		// Fall through to label ?Subroutine14

        RSEG CODE:CODE:NOROOT(1)
?Subroutine14:
        MOV	R30, R26
        LDI	R31, 0
        RET

        RSEG CODE:CODE:NOROOT(1)
?Subroutine11:
        RJMP	DS1307_read

        RSEG CODE:CODE:NOROOT(1)
ByteToBCD:
        MOV	R17, R25
        MOV	R18, R24
        MOV	R25, R16
        RCALL	?Subroutine7
??CrossCallReturnLabel_5:
        MOV	R24, R16
        SWAP	R24
        ANDI	R24, 0xF0
        MOV	R16, R25
        RCALL	?Subroutine7
??CrossCallReturnLabel_6:
        MOV	R16, R20
        ADD	R16, R24
        MOV	R24, R18
        MOV	R25, R17
        RET

        RSEG CODE:CODE:NOROOT(1)
?Subroutine7:
        LDI	R20, 10
        JMP	?UC_DIVMOD_L01

        RSEG CODE:CODE:NOROOT(1)
DS1307_settime:
        ST	-Y, R25
        ST	-Y, R24
        MOV	R25, R17
        MOV	R24, R18
        RCALL	?Subroutine8
??CrossCallReturnLabel_7:
        LDI	R16, 2
        RCALL	?Subroutine4
??CrossCallReturnLabel_12:
        LDI	R16, 1
        RCALL	?Subroutine5
??CrossCallReturnLabel_10:
        RCALL	?Subroutine6
??CrossCallReturnLabel_21:
        RJMP	?Subroutine13

        RSEG CODE:CODE:NOROOT(1)
?Subroutine6:
        LDI	R16, 0
        REQUIRE ?Subroutine10
        ;		// Fall through to label ?Subroutine10

        RSEG CODE:CODE:NOROOT(1)
?Subroutine10:
        RJMP	DS1307_write

        RSEG CODE:CODE:NOROOT(1)
DS1307_getdate:
        ST	-Y, R26
        MOV	R26, R16
        LDI	R16, 4
        RCALL	?Subroutine0
??CrossCallReturnLabel_29:
        ST	Z, R17
        RCALL	?Subroutine12
??CrossCallReturnLabel_25:
        STD	Z+1, R16
        LDI	R16, 46
        STD	Z+2, R16
        LDI	R16, 5
        RCALL	?Subroutine0
??CrossCallReturnLabel_30:
        STD	Z+3, R17
        RCALL	?Subroutine12
??CrossCallReturnLabel_26:
        STD	Z+4, R16
        LDI	R16, 46
        STD	Z+5, R16
        LDI	R16, 6
        RCALL	?Subroutine0
??CrossCallReturnLabel_31:
        STD	Z+6, R17
        RCALL	?Subroutine12
??CrossCallReturnLabel_27:
        STD	Z+7, R16
        STD	Z+8, R31
        RJMP	?Subroutine15

        RSEG CODE:CODE:NOROOT(1)
?Subroutine12:
        ANDI	R16, 0x0F
        SUBI	R16, 208
        RET

        RSEG CODE:CODE:NOROOT(1)
?Subroutine0:
        RCALL	?Subroutine11
??CrossCallReturnLabel_22:
        MOV	R17, R16
        SWAP	R17
        ANDI	R17, 0x0F
        SUBI	R17, 208
        RJMP	?Subroutine14

        RSEG CODE:CODE:NOROOT(1)
DS1307_setdate:
        ST	-Y, R25
        ST	-Y, R24
        MOVW	R25:R24, R17:R16
        MOV	R16, R18
        RCALL	?Subroutine8
??CrossCallReturnLabel_8:
        LDI	R16, 6
        RCALL	?Subroutine4
??CrossCallReturnLabel_11:
        LDI	R16, 5
        RCALL	?Subroutine5
??CrossCallReturnLabel_9:
        LDI	R16, 4
        RCALL	?Subroutine10
??CrossCallReturnLabel_19:
        RJMP	?Subroutine13

        RSEG CODE:CODE:NOROOT(1)
?Subroutine5:
        RCALL	?Subroutine10
??CrossCallReturnLabel_18:
        MOV	R16, R24
        RJMP	?Subroutine8

        RSEG CODE:CODE:NOROOT(1)
?Subroutine4:
        RCALL	?Subroutine10
??CrossCallReturnLabel_17:
        MOV	R16, R25
        REQUIRE ?Subroutine8
        ;		// Fall through to label ?Subroutine8

        RSEG CODE:CODE:NOROOT(1)
?Subroutine8:
        RCALL	ByteToBCD
        MOV	R17, R16
        RET

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        RSEG TINY_ID:CODE:NOROOT(0)
`?<Initializer for Clock_Init>`:
        DB 0, 0, 35, 2, 25, 4, 5

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: TINY_I>`:
        DW	SFE(TINY_I) - SFB(TINY_I)
        DW	SFB(TINY_I)
        DW	SFB(TINY_ID)
        REQUIRE ?need_segment_init

        END
// 
// 334 bytes in segment CODE
//   6 bytes in segment INITTAB
//   7 bytes in segment TINY_I
//   7 bytes in segment TINY_ID
// 
// 341 bytes of CODE memory (+ 6 bytes shared)
//   7 bytes of DATA memory
//
//Errors: none
//Warnings: none
