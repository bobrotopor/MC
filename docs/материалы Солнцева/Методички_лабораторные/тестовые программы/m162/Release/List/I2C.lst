##############################################################################
#                                                                            #
#                                                      28/Jun/2007  00:57:51 #
# IAR Atmel AVR C/C++ Compiler V4.10A/W32, Evaluation Version                #
# Copyright 1996-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  D:\stend\src\m162\I2C.c                                 #
#    Command line =  --cpu=m162 -ms -o D:\stend\src\m162\Release\Obj\ -D     #
#                    NDEBUG -lcN D:\stend\src\m162\Release\List\ -lb         #
#                    D:\stend\src\m162\Release\List\ -y                      #
#                    --initializers_in_flash -z9 -e -I "D:\Program           #
#                    Files\IAR Systems\AVR4.10A\avr\INC\" -I "D:\Program     #
#                    Files\IAR Systems\AVR4.10A\avr\INC\CLIB\"               #
#                    --eeprom_size 512 D:\stend\src\m162\I2C.c               #
#    List file    =  D:\stend\src\m162\Release\List\I2C.lst                  #
#    Object file  =  D:\stend\src\m162\Release\Obj\I2C.r90                   #
#                                                                            #
#                                                                            #
##############################################################################

D:\stend\src\m162\I2C.c
      1          #include "I2C.h"
      2          #include "DELAY.h"
      3          
      4          // Инициализация шины I2C
      5          void I2C_init()
      6          {
      7          	SDA_DDR = 0;
      8          	SCL_DDR = 0;
      9          	
     10          	SDA_PORT = 0;
     11          	SCL_PORT = 0;
     12          }
     13          
     14          // Функция начала передачи данных
     15          void I2C_start()
     16          {
     17          	SCL_DDR = 0;
     18          	SDA_DDR = 0;
     19          	DELAY_MCS( 20 );
     20          	SDA_DDR = 1;
     21          	DELAY_MCS( 20 );	
     22          	SCL_DDR = 1;
     23          }
     24          
     25          // Функция окончания передачи данных
     26          void I2C_stop()
     27          {
     28          	SDA_DDR = 1;
     29          	DELAY_MCS( 20 );
     30          	SCL_DDR = 0;
     31          	DELAY_MCS( 20 );
     32          	SDA_DDR = 0;
     33          }
     34          
     35          // Функция передачи байта по шине
     36          unsigned char I2C_write(unsigned char value)
     37          {
     38          	unsigned char i = 8;
     39          	while( i-- )
     40          	{
     41          		if( value & 0x80 )
     42          			SDA_DDR = 0;
     43          		else
     44          			SDA_DDR = 1;
     45          		value = value << 1;
     46          		SCL_DDR = 0;
     47          		DELAY_MCS( 20 );
     48          		SCL_DDR = 1;
     49          		DELAY_MCS( 20 );
     50          	}
     51          	SDA_DDR = 0;
     52          	SCL_DDR = 0;
     53          	DELAY_MCS( 20 );
     54          	if( SDA_PIN )
     55          		value = 255;
     56          	else
     57          		value= 0;
     58          	DELAY_MCS( 20 );
     59          	SCL_DDR = 1;
     60          	return value;
     61          }
     62          
     63          // Функция чтения байта
     64          unsigned char I2C_read()
     65          {
     66          	unsigned char value = 0, i = 8;
     67          	SDA_DDR = 0;
     68          	while( i-- )
     69          	{
     70          		SCL_DDR = 0;
     71          		DELAY_MCS( 20 );
     72          		value = value << 1;
     73          		if( SDA_PIN )
     74          			value |= 1;
     75          
     76          		DELAY_MCS( 20 );
     77          		SCL_DDR = 1;
     78          		DELAY_MCS( 20 );
     79          	}
     80          	SCL_DDR = 0;
     81          	DELAY_MCS( 20 );
     82          	SCL_DDR = 1;
     83          	
     84          	return value;
     85          }

   Maximum stack usage in bytes:

     Function            CSTACK RSTACK
     --------            ------ ------
     I2C_init                0      2
     I2C_read                2      2
       -> delay_func_mcs     2      2
       -> delay_func_mcs     2      2
       -> delay_func_mcs     2      2
       -> delay_func_mcs     2      2
     I2C_start               0      2
       -> delay_func_mcs     0      2
       -> delay_func_mcs     0      2
     I2C_stop                0      2
       -> delay_func_mcs     0      2
       -> delay_func_mcs     0      2
     I2C_write               2      2
       -> delay_func_mcs     2      2
       -> delay_func_mcs     2      2
       -> delay_func_mcs     2      2
       -> delay_func_mcs     2      2


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     I2C_init         10
     I2C_start         8
     ?Subroutine1      6
     ?Subroutine3      4
     ?Subroutine4      4
     I2C_stop         10
     ?Subroutine0      2
     I2C_write        52
     ?Subroutine5      8
     I2C_read         44
     _A_PORTA          1
     _A_DDRA           1
     _A_PINA           1

 
   3 bytes in segment ABSOLUTE
 148 bytes in segment CODE
 
 148 bytes of CODE memory
   0 bytes of DATA memory (+ 3 bytes shared)

Errors: none
Warnings: none
