##############################################################################
#                                                                            #
#                                                      23/Apr/2006  03:05:40 #
# IAR Atmel AVR C/C++ Compiler V4.12A/W32, Evaluation Version                #
# Copyright 1996-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  F:\Projects\VitalyIgorevich\Packet\src\m162\DS1307.c    #
#    Command line =  F:\Projects\VitalyIgorevich\Packet\src\m162\DS1307.c    #
#                    --cpu=m162 -ms -o F:\Projects\VitalyIgorevich\Packet\sr #
#                    c\m162\Debug\Obj\ -lCN F:\Projects\VitalyIgorevich\Pack #
#                    et\src\m162\Debug\List\ -y --initializers_in_flash -z9  #
#                    --cross_call_passes=2 --debug -e -I "E:\Program         #
#                    Files\IAR Systems\Embedded Workbench 4.0                #
#                    Evaluation\avr\INC\" -I "E:\Program Files\IAR           #
#                    Systems\Embedded Workbench 4.0                          #
#                    Evaluation\avr\INC\CLIB\" --eeprom_size 512             #
#    List file    =  F:\Projects\VitalyIgorevich\Packet\src\m162\Debug\List\ #
#                    DS1307.lst                                              #
#    Object file  =  F:\Projects\VitalyIgorevich\Packet\src\m162\Debug\Obj\D #
#                    S1307.r90                                               #
#                                                                            #
#                                                                            #
##############################################################################

F:\Projects\VitalyIgorevich\Packet\src\m162\DS1307.c
      1          #include "DS1307.h"
      2          #include "I2C.h"
      3          #include "DELAY.h"
      4          

   \                                 In segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
      5          unsigned char Clock_Init[] = {0x00, 0x00, 0x23, 0x02, 0x19, 0x04, 0x05};
   \                     Clock_Init:
   \   00000000                      DS 7
   \   00000007                      REQUIRE `?<Initializer for Clock_Init>`
      6          
      7          // Функция записи значения ячейки микросхемы DS1307

   \                                 In segment CODE, align 2, keep-with-next
      8          void DS1307_write(unsigned char addr, unsigned char value)
   \                     DS1307_write:
      9          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   2F90               MOV     R25, R16
   \   00000006   2F81               MOV     R24, R17
     10          	I2C_start();
   \   00000008   ....               RCALL   ?Subroutine5
     11          	I2C_write(0xd0);		// Команда записи
   \                     ??CrossCallReturnLabel_6:
   \   0000000A   ED00               LDI     R16, 208
   \   0000000C   ....               RCALL   ?Subroutine10
     12          	I2C_write(addr);		// Установка адреса
   \                     ??CrossCallReturnLabel_18:
   \   0000000E   2F09               MOV     R16, R25
   \   00000010   ....               RCALL   ?Subroutine1
     13          	I2C_write(value);		// Запись значения
     14          	I2C_stop();
     15          }
   \                     ??CrossCallReturnLabel_1:
   \   00000012                      REQUIRE ?Subroutine12
   \   00000012                      ;               // Fall through to label ?Subroutine12

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   ........           JMP     I2C_write

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   ........           JMP     I2C_start

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_16:
   \   00000002   2F08               MOV     R16, R24
   \   00000004   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_15:
   \   00000006   ........           JMP     I2C_stop
     16          
     17          // Функция чтения значения ячейки микросхемы DS1307

   \                                 In segment CODE, align 2, keep-with-next
     18          unsigned char DS1307_read(unsigned char addr)
   \                     DS1307_read:
     19          {
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
     20          	unsigned char value;  
     21          	I2C_start();
   \   00000004   ....               RCALL   ?Subroutine5
     22          	I2C_write(0xd0);    	// Команда записи
   \                     ??CrossCallReturnLabel_5:
   \   00000006   ED00               LDI     R16, 208
   \   00000008   ....               RCALL   ?Subroutine1
     23          	I2C_write(addr);       	// Установка адреса
     24          	I2C_stop();
     25          
     26          	DELAY_MCS(68);
   \                     ??CrossCallReturnLabel_0:
   \   0000000A   EA04               LDI     R16, 164
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   ........           CALL    delay_func_mcs
     27          
     28          	I2C_start(); 
   \   00000012   ....               RCALL   ?Subroutine5
     29          	I2C_write(0xd1);         // Команда чтения
   \                     ??CrossCallReturnLabel_4:
   \   00000014   ED01               LDI     R16, 209
   \   00000016   ....               RCALL   ?Subroutine10
     30          	value = I2C_read();	
   \                     ??CrossCallReturnLabel_17:
   \   00000018   ........           CALL    I2C_read
   \   0000001C   2F80               MOV     R24, R16
     31          	I2C_stop();
   \   0000001E   ........           CALL    I2C_stop
     32          
     33          	return value;
   \   00000022   2F08               MOV     R16, R24
   \   00000024   9189               LD      R24, Y+
   \   00000026   9508               RET
     34          }
     35          
     36          // Функция получения значения времени
     37          // Длина строки timestr должна быть равна 9

   \                                 In segment CODE, align 2, keep-with-next
     38          void DS1307_gettime(char* timestr)
   \                     DS1307_gettime:
     39          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     40          	unsigned char value;
     41          
     42          	value = DS1307_read(2);					// Читаем часы
   \   00000006   E002               LDI     R16, 2
   \   00000008   ....               RCALL   ?Subroutine2
     43          	timestr[0] = (value >> 4) + '0';
   \                     ??CrossCallReturnLabel_2:
   \   0000000A   930C               ST      X, R16
     44          	timestr[1] = (value & 0x0F) + '0';
   \   0000000C   708F               ANDI    R24, 0x0F
   \   0000000E   5D80               SUBI    R24, 208
   \   00000010   01FD               MOVW    R31:R30, R27:R26
   \   00000012   8381               STD     Z+1, R24
     45          	timestr[2] = ':';
   \   00000014   E30A               LDI     R16, 58
   \   00000016   8302               STD     Z+2, R16
     46          
     47          	value = DS1307_read(1);					// Читаем минуты
   \   00000018   E001               LDI     R16, 1
   \   0000001A   ....               RCALL   ?Subroutine2
     48          	timestr[3] = (value >> 4) + '0';
   \                     ??CrossCallReturnLabel_3:
   \   0000001C   01FD               MOVW    R31:R30, R27:R26
   \   0000001E   8303               STD     Z+3, R16
     49          	timestr[4] = (value & 0x0F) + '0';
   \   00000020   708F               ANDI    R24, 0x0F
   \   00000022   5D80               SUBI    R24, 208
   \   00000024   8384               STD     Z+4, R24
     50          	timestr[5] = ':';
   \   00000026   E30A               LDI     R16, 58
   \   00000028   8305               STD     Z+5, R16
     51          
     52          	value = DS1307_read(0);					// Читаем секунды
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   ....               RCALL   DS1307_read
   \   0000002E   2F80               MOV     R24, R16
     53          	if(value & 0x80)
   \   00000030   FB87               BST     R24, 7
   \   00000032   F416               BRTC    ??CrossCallReturnLabel_22
     54          		DS1307_write(0, 0);					// Чтобы не зависали часы	
   \   00000034   E010               LDI     R17, 0
   \   00000036   ....               RCALL   ?Subroutine6
     55          	timestr[6] = (value >> 4) + '0';
   \                     ??CrossCallReturnLabel_22:
   \   00000038   2F08               MOV     R16, R24
   \   0000003A   9502               SWAP    R16
   \   0000003C   700F               ANDI    R16, 0x0F
   \   0000003E   5D00               SUBI    R16, 208
   \   00000040   01FD               MOVW    R31:R30, R27:R26
   \   00000042   8306               STD     Z+6, R16
     56          	timestr[7] = (value & 0x0F) + '0';
   \   00000044   708F               ANDI    R24, 0x0F
   \   00000046   5D80               SUBI    R24, 208
   \   00000048   8387               STD     Z+7, R24
     57          	timestr[8] = 0;
   \   0000004A   E000               LDI     R16, 0
   \   0000004C   8700               STD     Z+8, R16
     58          }
   \   0000004E   E0E4               LDI     R30, 4
   \   00000050   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   ....               RCALL   DS1307_read
   \   00000002   2F80               MOV     R24, R16
   \   00000004   9502               SWAP    R16
   \   00000006   700F               ANDI    R16, 0x0F
   \   00000008   5D00               SUBI    R16, 208
   \   0000000A   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   E000               LDI     R16, 0
   \   00000002                      REQUIRE ?Subroutine11
   \   00000002                      ;               // Fall through to label ?Subroutine11

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   ....               RJMP    DS1307_write
     59          
     60          // Фукция преобразования числа в BCD-формат, когда на один десятичный разряд 
     61          // отводится 4 бита

   \                                 In segment CODE, align 2, keep-with-next
     62          unsigned char ByteToBCD( unsigned char value )
   \                     ByteToBCD:
     63          {
   \   00000000   2F19               MOV     R17, R25
   \   00000002   2F28               MOV     R18, R24
   \   00000004   2F90               MOV     R25, R16
     64          	return ( ( value / 10 ) << 4 ) + ( value % 10 );
   \   00000006   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_7:
   \   00000008   2F80               MOV     R24, R16
   \   0000000A   9582               SWAP    R24
   \   0000000C   7F80               ANDI    R24, 0xF0
   \   0000000E   2F09               MOV     R16, R25
   \   00000010   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_8:
   \   00000012   2F04               MOV     R16, R20
   \   00000014   0F08               ADD     R16, R24
   \   00000016   2F82               MOV     R24, R18
   \   00000018   2F91               MOV     R25, R17
   \   0000001A   9508               RET
     65          }

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   E04A               LDI     R20, 10
   \   00000002   ........           JMP     ?UC_DIVMOD_L01
     66          
     67          // Функция задания значения времени

   \                                 In segment CODE, align 2, keep-with-next
     68          void DS1307_settime( unsigned char hour, unsigned char minute, unsigned char second )
   \                     DS1307_settime:
     69          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   2F91               MOV     R25, R17
   \   00000006   2F82               MOV     R24, R18
     70          	DS1307_write( 2, ByteToBCD( hour ) );
   \   00000008   ....               RCALL   ?Subroutine9
   \                     ??CrossCallReturnLabel_9:
   \   0000000A   E002               LDI     R16, 2
   \   0000000C   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_14:
   \   0000000E   E001               LDI     R16, 1
   \   00000010   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_12:
   \   00000012   ....               RCALL   ?Subroutine6
     71          	DS1307_write( 1, ByteToBCD( minute ) );
     72          	DS1307_write( 0, ByteToBCD( second ) );
     73          }
   \                     ??CrossCallReturnLabel_23:
   \   00000014   ....               RJMP    ?Subroutine12

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   ....               RCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_20:
   \   00000002   2F08               MOV     R16, R24
   \   00000004   ....               RJMP    ?Subroutine9

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   ....               RCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_19:
   \   00000002   2F09               MOV     R16, R25
   \   00000004                      REQUIRE ?Subroutine9
   \   00000004                      ;               // Fall through to label ?Subroutine9

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   ....               RCALL   ByteToBCD
   \   00000002   2F10               MOV     R17, R16
   \   00000004   9508               RET
     74          
     75          // Функция получения значения даты
     76          // Длина строки datestr должна быть равна 9

   \                                 In segment CODE, align 2, keep-with-next
     77          void DS1307_getdate(char* datestr)
   \                     DS1307_getdate:
     78          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     79          	unsigned char value;
     80          
     81          	value = DS1307_read(4);					// Читаем день(число)
   \   00000006   E004               LDI     R16, 4
   \   00000008   ....               RCALL   ?Subroutine0
     82          	datestr[0] = (value >> 4) + '0';
     83          	datestr[1] = (value & 0x0F) + '0';
     84          	datestr[2] = '.';
     85          
     86          	value = DS1307_read(5);					// Читаем месяц
   \                     ??CrossCallReturnLabel_26:
   \   0000000A   E005               LDI     R16, 5
   \   0000000C   ....               RCALL   ?Subroutine0
     87          	datestr[3] = (value >> 4) + '0';
     88          	datestr[4] = (value & 0x0F) + '0';
     89          	datestr[5] = '.';
     90          
     91          	value = DS1307_read(6);					// Читаем год
   \                     ??CrossCallReturnLabel_27:
   \   0000000E   E006               LDI     R16, 6
   \   00000010   ....               RCALL   ?Subroutine8
     92          	datestr[6] = (value >> 4) + '0';
     93          	datestr[7] = (value & 0x0F) + '0';
     94          	datestr[8] = 0;
   \                     ??CrossCallReturnLabel_24:
   \   00000012   E000               LDI     R16, 0
   \   00000014   930C               ST      X, R16
     95          }
   \   00000016   91A9               LD      R26, Y+
   \   00000018   91B9               LD      R27, Y+
   \   0000001A   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_25:
   \   00000002   E20E               LDI     R16, 46
   \   00000004                      REQUIRE ?Subroutine13
   \   00000004                      ;               // Fall through to label ?Subroutine13

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   930D               ST      X+, R16
   \   00000002   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   ....               RCALL   DS1307_read
   \   00000002   2F10               MOV     R17, R16
   \   00000004   9512               SWAP    R17
   \   00000006   701F               ANDI    R17, 0x0F
   \   00000008   5D10               SUBI    R17, 208
   \   0000000A   931D               ST      X+, R17
   \   0000000C   700F               ANDI    R16, 0x0F
   \   0000000E   5D00               SUBI    R16, 208
   \   00000010   ....               RJMP    ?Subroutine13
     96          
     97          // Функция задания значения даты

   \                                 In segment CODE, align 2, keep-with-next
     98          void DS1307_setdate( unsigned char day, unsigned char month, unsigned char year )
   \                     DS1307_setdate:
     99          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2F02               MOV     R16, R18
    100          	DS1307_write( 6, ByteToBCD( year ) );
   \   00000008   ....               RCALL   ?Subroutine9
   \                     ??CrossCallReturnLabel_10:
   \   0000000A   E006               LDI     R16, 6
   \   0000000C   ....               RCALL   ?Subroutine3
    101          	DS1307_write( 5, ByteToBCD( month ) );
   \                     ??CrossCallReturnLabel_13:
   \   0000000E   E005               LDI     R16, 5
   \   00000010   ....               RCALL   ?Subroutine4
    102          	DS1307_write( 4, ByteToBCD( day ) );
   \                     ??CrossCallReturnLabel_11:
   \   00000012   E004               LDI     R16, 4
   \   00000014   ....               RCALL   ?Subroutine11
    103          }
   \                     ??CrossCallReturnLabel_21:
   \   00000016   ....               RJMP    ?Subroutine12

   \                                 In segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for Clock_Init>`:
   \   00000000   000002230419       DB 0, 0, 35, 2, 25, 4, 5
   \              05          

   Maximum stack usage in bytes:

     Function            CSTACK RSTACK
     --------            ------ ------
     ByteToBCD               2      4
     DS1307_getdate          2      2
       -> DS1307_read        2      2
       -> DS1307_read        2      2
       -> DS1307_read        2      2
     DS1307_gettime          4      2
       -> DS1307_read        4      2
       -> DS1307_read        4      2
       -> DS1307_read        4      2
       -> DS1307_write       4      2
     DS1307_read             1      2
       -> I2C_start          1      2
       -> I2C_write          1      2
       -> I2C_write          1      2
       -> I2C_stop           1      2
       -> delay_func_mcs     1      2
       -> I2C_start          1      2
       -> I2C_write          1      2
       -> I2C_read           1      2
       -> I2C_stop           1      2
     DS1307_setdate          2      2
       -> ByteToBCD          2      2
       -> DS1307_write       2      2
       -> ByteToBCD          2      2
       -> DS1307_write       2      2
       -> ByteToBCD          2      2
       -> DS1307_write       2      2
     DS1307_settime          2      2
       -> ByteToBCD          2      2
       -> DS1307_write       2      2
       -> ByteToBCD          2      2
       -> DS1307_write       2      2
       -> ByteToBCD          2      2
       -> DS1307_write       2      2
     DS1307_write            2      2
       -> I2C_start          2      2
       -> I2C_write          2      2
       -> I2C_write          2      2
       -> I2C_write          2      2
       -> I2C_stop           2      2


   Segment part sizes:

     Function/Label                Bytes
     --------------                -----
     Clock_Init                       7
     DS1307_write                    18
     ?Subroutine12                    6
     ?Subroutine10                    4
     ?Subroutine5                     4
     ?Subroutine1                    10
     DS1307_read                     40
     DS1307_gettime                  84
     ?Subroutine2                    12
     ?Subroutine6                     2
     ?Subroutine11                    2
     ByteToBCD                       28
     ?Subroutine7                     6
     DS1307_settime                  22
     ?Subroutine4                     6
     ?Subroutine3                     4
     ?Subroutine9                     6
     DS1307_getdate                  28
     ?Subroutine0                     4
     ?Subroutine13                    4
     ?Subroutine8                    18
     DS1307_setdate                  24
     ?<Initializer for Clock_Init>    7
      Others                          6

 
 332 bytes in segment CODE
   6 bytes in segment INITTAB
   7 bytes in segment NEAR_I
   7 bytes in segment NEAR_ID
 
 339 bytes of CODE memory (+ 6 bytes shared)
   7 bytes of DATA memory

Errors: none
Warnings: none
