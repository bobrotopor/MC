##############################################################################
#                                                                            #
#                                                      23/Apr/2006  03:06:49 #
# IAR Atmel AVR C/C++ Compiler V4.12A/W32, Evaluation Version                #
# Copyright 1996-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  F:\Projects\VitalyIgorevich\Packet\src\m162\Main.c      #
#    Command line =  F:\Projects\VitalyIgorevich\Packet\src\m162\Main.c      #
#                    --cpu=m162 -ms -o F:\Projects\VitalyIgorevich\Packet\sr #
#                    c\m162\Debug\Obj\ -lCN F:\Projects\VitalyIgorevich\Pack #
#                    et\src\m162\Debug\List\ -y --initializers_in_flash -z9  #
#                    --cross_call_passes=2 --debug -e -I "E:\Program         #
#                    Files\IAR Systems\Embedded Workbench 4.0                #
#                    Evaluation\avr\INC\" -I "E:\Program Files\IAR           #
#                    Systems\Embedded Workbench 4.0                          #
#                    Evaluation\avr\INC\CLIB\" --eeprom_size 512             #
#    List file    =  F:\Projects\VitalyIgorevich\Packet\src\m162\Debug\List\ #
#                    Main.lst                                                #
#    Object file  =  F:\Projects\VitalyIgorevich\Packet\src\m162\Debug\Obj\M #
#                    ain.r90                                                 #
#                                                                            #
#                                                                            #
##############################################################################

F:\Projects\VitalyIgorevich\Packet\src\m162\Main.c
      1          #include "BEEP.H"

   \                                 In segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS 1
      2          #include "DELAY.H"
      3          #include "SPI.H"
      4          #include "LCD_HD44780.H"
      5          #include "I2C.H"
      6          #include "KEYBOARD.H"
      7          #include "LED7.H"
      8          #include "UART.H"
      9          #include "DS1307.H"
     10          #include "DS1820.H"
     11          #include "AT24CXX.H"
     12          #include "CONVERT.H"
     13          
     14          // Строковые константы, которые храняться в flash-памяти, чтобы избежать
     15          // переполнения оперативной памяти
     16          

   \                                 In segment NEAR_F, align 1, keep-with-next
     17          flash char UartMessage[] = "                -=  STEND RK-10  =-\r\n"
   \                     UartMessage:
   \   00000000   202020202020       DB 20H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
   \              2020        
   \   00000008   202020202020       DB 20H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
   \              2020        
   \   00000010   3D2D20205453       DB 2DH, 3DH, 20H, 20H, 53H, 54H, 45H, 4EH
   \              4E45        
   \   00000018   20444B52312D       DB 44H, 20H, 52H, 4BH, 2DH, 31H, 30H, 20H
   \              2030        
   \   00000020   3D200D2D200A       DB 20H, 3DH, 2DH, 0DH, 0AH, 20H, 20H, 20H
   \              2020        
   \   00000028   202020206148       DB 20H, 20H, 20H, 20H, 48H, 61H, 72H, 64H
   \              6472        
   \   00000030   617765727620       DB 77H, 61H, 72H, 65H, 20H, 76H, 65H, 72H
   \              7265        
   \   00000038   202E2E312C30       DB 2EH, 20H, 31H, 2EH, 30H, 2CH, 20H, 46H
   \              4620        
   \   00000040   7269776D7261       DB 69H, 72H, 6DH, 77H, 61H, 72H, 65H, 20H
   \              2065        
   \   00000048   65762E723220       DB 76H, 65H, 72H, 2EH, 20H, 32H, 2EH, 30H
   \              302E        
   \   00000050   0A0D00             DB 0DH, 0AH, 0
     18          						   "       Hardware ver. 1.0, Firmware ver. 2.0\r\n";
     19          
     20          flash unsigned char LcdMessageLine1[] = { 45, 61, 67, 84, 69, 72, 224, 32, 32, 80, 75, 45, 49, 48, 61, 45, 0 };
     21          flash unsigned char LcdMessageLine2[] = "   Ver. 2.0";
     22          
     23          flash char timeStr[] = "Time: ";
     24          flash char dateStr[] = "Date: ";
     25          flash char enterAddressStr[] = "Enter address(0..255): ";
     26          flash char enterValueStr[] = "Enter value(0..255): ";
     27          flash char valueStr[] = "Value: ";
     28          flash char temperatureStr[] = "Temperature: ";
     29          
     30          flash char enterHourStr[] = "Enter hour: ";
     31          flash char enterMinuteStr[] = "Enter minute: ";
     32          flash char enterSecondStr[] = "Enter second: ";
     33          flash char enterDayStr[] = "Enter day: ";
     34          flash char enterMonthStr[] = "Enter month: ";
     35          flash char enterYearStr[] = "Enter year: ";
     36          flash char sensorNotConnectedStr[] = "Sensor is not connected";
     37          
     38          flash char enterTaskNumberStr[] = "Enter task number: ";
   \                     enterTaskNumberStr:
   \   00000053   6E4565742072       DB "Enter task number: "
   \              61746B736E20
   \              6D7565623A72
   \              0020        

   \                                 In segment NEAR_F, align 1, keep-with-next
   \                     LcdMessageLine1:
   \   00000000   3D2D54434845       DB 45, 61, 67, 84, 69, 72, 224, 32, 32, 80, 75, 45, 49, 48, 61, 45, 0
   \              20E050202D4B
   \              30312D3D00  
   \                     LcdMessageLine2:
   \   00000011   202056207265       DB "   Ver. 2.0"
   \              202E2E320030

   \                                 In segment NEAR_F, align 1, keep-with-next
   \                     timeStr:
   \   00000000   6954656D203A       DB "Time: "
   \              00          
   \                     dateStr:
   \   00000007   61446574203A       DB "Date: "
   \              00          

   \                                 In segment NEAR_F, align 1, keep-with-next
   \                     enterAddressStr:
   \   00000000   6E4565742072       DB "Enter address(0..255): "
   \              646172647365
   \              28732E30322E
   \              35353A290020
   \                     enterValueStr:
   \   00000018   6E4565742072       DB "Enter value(0..255): "
   \              6176756C2865
   \              2E30322E3535
   \              3A290020    
   \                     valueStr:
   \   0000002E   6156756C3A65       DB "Value: "
   \              0020        

   \                                 In segment NEAR_F, align 1, keep-with-next
   \                     temperatureStr:
   \   00000000   6554706D7265       DB "Temperature: "
   \              746172753A65
   \              0020        
   \                     sensorNotConnectedStr:
   \   0000000E   6553736E726F       DB "Sensor is not connected"
   \              692020736F6E
   \              20746F636E6E
   \              636565740064

   \                                 In segment NEAR_F, align 1, keep-with-next
   \                     enterHourStr:
   \   00000000   6E4565742072       DB "Enter hour: "
   \              6F687275203A
   \              00          
   \                     enterMinuteStr:
   \   0000000D   6E4565742072       DB "Enter minute: "
   \              696D756E6574
   \              203A00      
   \                     enterSecondStr:
   \   0000001C   6E4565742072       DB "Enter second: "
   \              65736F63646E
   \              203A00      
   \                     enterDayStr:
   \   0000002B   6E4565742072       DB "Enter day: "
   \              61643A790020
   \                     enterMonthStr:
   \   00000037   6E4565742072       DB "Enter month: "
   \              6F6D746E3A68
   \              0020        
   \                     enterYearStr:
   \   00000045   6E4565742072       DB "Enter year: "
   \              65797261203A
   \              00          
     39          
     40          // Задание 1: пользователь нажимает на кнопки(цифры) телефонной клавиатуры и 
     41          //			  соответствующая цифра появляется на LCD-экране
     42          //			  при нажатии * экран очищается
     43          //			  при нажатии # осуществляется выход из задания

   \                                 In segment CODE, align 2, keep-with-next
     44          void ExecuteTask1()
   \                     ExecuteTask1:
     45          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
     46          	unsigned char key = 0;
     47          	char keyname;	
     48          	unsigned char keyCount = 0;
   \   00000004   E090               LDI     R25, 0
     49          
     50          	LCD_clrscr();
   \   00000006   ....               RCALL   ?Subroutine3
     51          	while( key != KEY_BAR )
     52          	{
     53          		key = KEY_getkey();
   \                     ??CrossCallReturnLabel_9:
   \   00000008   ....               RCALL   ?Subroutine0
     54          
     55          		if( !key )
   \                     ??CrossCallReturnLabel_0:
   \   0000000A   F089               BREQ    ??CrossCallReturnLabel_17
     56          			continue;
     57          
     58          		keyname = KEY_getkeyname( key );
   \   0000000C   ....               RCALL   ?Subroutine4
     59          	
     60          		if( keyname >= '0' && keyname  <= '9' )
   \                     ??CrossCallReturnLabel_13:
   \   0000000E   3300               CPI     R16, 48
   \   00000010   F048               BRCS    ??ExecuteTask1_0
   \   00000012   330A               CPI     R16, 58
   \   00000014   F438               BRCC    ??ExecuteTask1_0
     61          		{	
     62          			LCD_printchar( keyname );
   \   00000016   ........           CALL    LCD_printchar
     63          			keyCount++;
   \   0000001A   9593               INC     R25
     64          
     65          			if( keyCount == LCD_WIDTH )
   \   0000001C   3190               CPI     R25, 16
   \   0000001E   F431               BRNE    ??ExecuteTask1_1
     66          				LCD_gotoxy( 0, 1 );
   \   00000020   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_60:
   \   00000022   C004               RJMP    ??ExecuteTask1_1
     67          		}
     68          		else if( key == KEY_ASTERISK )
   \                     ??ExecuteTask1_0:
   \   00000024   3188               CPI     R24, 24
   \   00000026   F411               BRNE    ??ExecuteTask1_1
     69          		{
     70          			LCD_clrscr();
   \   00000028   ....               RCALL   ?Subroutine3
     71          			keyCount = 0;
   \                     ??CrossCallReturnLabel_8:
   \   0000002A   E090               LDI     R25, 0
     72          		}
     73          	
     74          		KEY_waitforkeyrelease();
   \                     ??ExecuteTask1_1:
   \   0000002C   ....               RCALL   ?Subroutine5
     75          	}
   \                     ??CrossCallReturnLabel_17:
   \   0000002E   3488               CPI     R24, 72
   \   00000030   F759               BRNE    ??CrossCallReturnLabel_9
     76          }
   \   00000032                      REQUIRE ?Subroutine19
   \   00000032                      ;               // Fall through to label ?Subroutine19

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   ........           JMP     KEY_waitforkeyrelease

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ........           CALL    KEY_getkey
   \   00000004   2F80               MOV     R24, R16
   \   00000006   2300               TST     R16
   \   00000008   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   ........           JMP     KEY_getkeyname

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   E011               LDI     R17, 1
   \   00000002   E000               LDI     R16, 0
   \   00000004                      REQUIRE ?Subroutine22
   \   00000004                      ;               // Fall through to label ?Subroutine22

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   ........           JMP     LCD_gotoxy

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   ........           JMP     LCD_clrscr
     77          
     78          // Задание 2: пользователь нажимает на кнопки(цифры) телефонной клавиатуры и 
     79          //			  соответствующая цифра появляется на семисегментном индикаторе
     80          //			  при нажатии # осуществляется выход из задания

   \                                 In segment CODE, align 2, keep-with-next
     81          void ExecuteTask2()
   \                     ExecuteTask2:
     82          {
   \   00000000   938A               ST      -Y, R24
     83          	unsigned char key = 0;
     84          	
     85          	while( key != KEY_BAR )
     86          	{
     87          		key = KEY_getkey();
   \                     ??ExecuteTask2_0:
   \   00000002   ....               RCALL   ?Subroutine0
     88          
     89          		if( !key )
   \                     ??CrossCallReturnLabel_1:
   \   00000004   F029               BREQ    ??CrossCallReturnLabel_16
     90          			continue;
     91          
     92          		LED7_setdigit( KEY_getkeyname( key ) - '0' );
   \   00000006   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_12:
   \   00000008   5300               SUBI    R16, 48
   \   0000000A   ........           CALL    LED7_setdigit
     93          		KEY_waitforkeyrelease();
   \   0000000E   ....               RCALL   ?Subroutine5
     94          	}
   \                     ??CrossCallReturnLabel_16:
   \   00000010   3488               CPI     R24, 72
   \   00000012   F7B9               BRNE    ??ExecuteTask2_0
     95          }
   \   00000014   ....               RJMP    ?Subroutine20

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9508               RET
     96          
     97          // Задание 3: при нажатии на кнопки телефонной клавиатуры раздается 
     98          //			  сигнал зуммера
     99          //			  при нажатии # осуществляется выход из задания

   \                                 In segment CODE, align 2, keep-with-next
    100          void ExecuteTask3()
   \                     ExecuteTask3:
    101          {
   \   00000000   938A               ST      -Y, R24
    102          	unsigned char key = 0;
    103          	
    104          	while( key != KEY_BAR )
    105          	{
    106          		key = KEY_getkey();
   \                     ??ExecuteTask3_0:
   \   00000002   ....               RCALL   ?Subroutine0
    107          
    108          		if( !key )
   \                     ??CrossCallReturnLabel_2:
   \   00000004   F029               BREQ    ??CrossCallReturnLabel_15
    109          			continue;
    110          
    111          		Beep( 100 );
   \   00000006   E604               LDI     R16, 100
   \   00000008   E010               LDI     R17, 0
   \   0000000A   ........           CALL    Beep
    112          		KEY_waitforkeyrelease();
   \   0000000E   ....               RCALL   ?Subroutine5
    113          	}
   \                     ??CrossCallReturnLabel_15:
   \   00000010   3488               CPI     R24, 72
   \   00000012   F7B9               BRNE    ??ExecuteTask3_0
    114          }
   \   00000014   ....               RJMP    ?Subroutine20
    115          
    116          // Задание 4: при нажатии на кнопки телефонной клавиатуры(1,2,3) меняет 
    117          //			  состояние соответствующий этой кнопке LED-индикатор
    118          //			  при нажатии # осуществляется выход из задания

   \                                 In segment CODE, align 2, keep-with-next
    119          void ExecuteTask4()
   \                     ExecuteTask4:
    120          {
   \   00000000   938A               ST      -Y, R24
    121          	unsigned char key = 0;
    122          	
    123          	while( key != KEY_BAR )
    124          	{
    125          		key = KEY_getkey();
   \                     ??ExecuteTask4_0:
   \   00000002   ....               RCALL   ?Subroutine0
    126          
    127          		if( !key )
   \                     ??CrossCallReturnLabel_3:
   \   00000004   F0D1               BREQ    ??CrossCallReturnLabel_14
    128          			continue;
    129          
    130          		switch( KEY_getkeyname( key ) ) {
   \   00000006   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_11:
   \   00000008   5301               SUBI    R16, 49
   \   0000000A   F029               BREQ    ??ExecuteTask4_1
   \   0000000C   950A               DEC     R16
   \   0000000E   F049               BREQ    ??ExecuteTask4_2
   \   00000010   950A               DEC     R16
   \   00000012   F069               BREQ    ??ExecuteTask4_3
   \   00000014   C011               RJMP    ??ExecuteTask4_4
    131          		case '1':
    132          			LED1_PORT = !LED1_PORT;
   \                     ??ExecuteTask4_1:
   \   00000016   B308               IN      R16, 0x18
   \   00000018   FF00               SBRS    R16, 0
   \   0000001A   9AC0               SBI     0x18, 0x00
   \                     ??ExecuteTask4_5:
   \   0000001C   FD00               SBRC    R16, 0
   \   0000001E   98C0               CBI     0x18, 0x00
   \                     ??ExecuteTask4_6:
   \   00000020   C00B               RJMP    ??ExecuteTask4_4
    133          			break;
    134          		case '2':
    135          			LED2_PORT = !LED2_PORT;
   \                     ??ExecuteTask4_2:
   \   00000022   B308               IN      R16, 0x18
   \   00000024   FF01               SBRS    R16, 1
   \   00000026   9AC1               SBI     0x18, 0x01
   \                     ??ExecuteTask4_7:
   \   00000028   FD01               SBRC    R16, 1
   \   0000002A   98C1               CBI     0x18, 0x01
   \                     ??ExecuteTask4_8:
   \   0000002C   C005               RJMP    ??ExecuteTask4_4
    136          			break;
    137          		case '3':
    138          			LED3_PORT = !LED3_PORT;
   \                     ??ExecuteTask4_3:
   \   0000002E   B302               IN      R16, 0x12
   \   00000030   FF05               SBRS    R16, 5
   \   00000032   9A95               SBI     0x12, 0x05
   \                     ??ExecuteTask4_9:
   \   00000034   FD05               SBRC    R16, 5
   \   00000036   9895               CBI     0x12, 0x05
    139          			break;
    140          		}
    141          		KEY_waitforkeyrelease();
   \                     ??ExecuteTask4_4:
   \   00000038   ....               RCALL   ?Subroutine5
    142          	}
   \                     ??CrossCallReturnLabel_14:
   \   0000003A   3488               CPI     R24, 72
   \   0000003C   F711               BRNE    ??ExecuteTask4_0
    143          }
   \   0000003E                      REQUIRE ?Subroutine20
   \   0000003E                      ;               // Fall through to label ?Subroutine20
    144          
    145          // Задание 5: в UART выводится текущее время и дата, полученные из
    146          // 			  микросхемы DS1307

   \                                 In segment CODE, align 2, keep-with-next
    147          void ExecuteTask5()
   \                     ExecuteTask5:
    148          {
   \   00000000   9762               SBIW    R29:R28, 18
    149          	char time[9], date[9];
    150          	DS1307_gettime(time);
   \   00000002   018E               MOVW    R17:R16, R29:R28
   \   00000004   ........           CALL    DS1307_gettime
    151          	DS1307_getdate(date);
   \   00000008   ....               RCALL   ?Subroutine9
    152          
    153          	UART_sendstring_flash( timeStr );
   \                     ??CrossCallReturnLabel_21:
   \   0000000A   ....               LDI     R16, LOW(timeStr)
   \   0000000C   ....               LDI     R17, (timeStr) >> 8
   \   0000000E   ....               RCALL   ?Subroutine10
    154          	UART_sendstring( time );
    155          	UART_sendcrlf();
   \                     ??CrossCallReturnLabel_23:
   \   00000010   ....               RCALL   ?Subroutine13
    156          	UART_sendstring_flash( dateStr );
   \                     ??CrossCallReturnLabel_29:
   \   00000012   ....               LDI     R16, LOW((timeStr + 7))
   \   00000014   ....               LDI     R17, HIGH((timeStr + 7))
   \   00000016   ....               RCALL   ?Subroutine18
    157          	UART_sendstring( date );
   \                     ??CrossCallReturnLabel_40:
   \   00000018   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_36:
   \   0000001A   ........           CALL    UART_sendstring
    158          	UART_sendcrlf();
   \   0000001E   ....               RCALL   ?Subroutine13
    159          }
   \                     ??CrossCallReturnLabel_28:
   \   00000020   9662               ADIW    R29:R28, 18
   \   00000022   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   ........           JMP     UART_sendcrlf

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   ........           JMP     UART_sendstring_flash

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_39:
   \   00000002   018E               MOVW    R17:R16, R29:R28
   \   00000004   ........           JMP     UART_sendstring

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   018E               MOVW    R17:R16, R29:R28
   \   00000002   5F07               SUBI    R16, 247
   \   00000004   4F1F               SBCI    R17, 255
   \   00000006   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_38:
   \   00000002   ........           JMP     DS1307_getdate
    160          
    161          // Задание 6: через UART-интерфейс пользователь вводит новое время и дату,
    162          // 			  которые устанавливаются в микросхему DS1307

   \                                 In segment CODE, align 2, keep-with-next
    163          void ExecuteTask6()
   \                     ExecuteTask6:
    164          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
    165          	unsigned char hour, minute, second;
    166          	unsigned char day, month, year;
    167          	
    168          	UART_sendstring_flash( enterHourStr );
   \   00000004   ....               LDI     R16, LOW(enterHourStr)
   \   00000006   ....               LDI     R17, (enterHourStr) >> 8
   \   00000008   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_54:
   \   0000000A   2F90               MOV     R25, R16
    169          	hour = UART_receivevalue();	
    170          	UART_sendstring_flash( enterMinuteStr );
   \   0000000C   ....               LDI     R16, LOW((enterHourStr + 13))
   \   0000000E   ....               LDI     R17, HIGH((enterHourStr + 13))
   \   00000010   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_53:
   \   00000012   2F80               MOV     R24, R16
    171          	minute = UART_receivevalue();	
    172          	UART_sendstring_flash( enterSecondStr );
   \   00000014   ....               LDI     R16, LOW((enterHourStr + 28))
   \   00000016   ....               LDI     R17, HIGH((enterHourStr + 28))
   \   00000018   ....               RCALL   ?Subroutine7
    173          	second = UART_receivevalue();	
   \                     ??CrossCallReturnLabel_18:
   \   0000001A   ........           CALL    DS1307_settime
    174          	
    175          	DS1307_settime( hour, minute, second );
    176          
    177          	UART_sendstring_flash( enterDayStr );
   \   0000001E   ....               LDI     R16, LOW((enterHourStr + 43))
   \   00000020   ....               LDI     R17, HIGH((enterHourStr + 43))
   \   00000022   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_52:
   \   00000024   2F90               MOV     R25, R16
    178          	day = UART_receivevalue();	
    179          	UART_sendstring_flash( enterMonthStr );
   \   00000026   ....               LDI     R16, LOW((enterHourStr + 55))
   \   00000028   ....               LDI     R17, HIGH((enterHourStr + 55))
   \   0000002A   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_51:
   \   0000002C   2F80               MOV     R24, R16
    180          	month = UART_receivevalue();	
    181          	UART_sendstring_flash( enterYearStr );
   \   0000002E   ....               LDI     R16, LOW((enterHourStr + 69))
   \   00000030   ....               LDI     R17, HIGH((enterHourStr + 69))
   \   00000032   ....               RCALL   ?Subroutine7
    182          	year = UART_receivevalue();	
    183          	
    184          	DS1307_setdate( day, month, year );
   \                     ??CrossCallReturnLabel_19:
   \   00000034   ........           CALL    DS1307_setdate
    185          }
   \   00000038   ....               RJMP    ?Subroutine19

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_46:
   \   00000002                      REQUIRE ?Subroutine21
   \   00000002                      ;               // Fall through to label ?Subroutine21

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   ........           JMP     UART_receivevalue

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_48:
   \   00000002   2F20               MOV     R18, R16
   \   00000004   2F18               MOV     R17, R24
   \   00000006   2F09               MOV     R16, R25
   \   00000008   9508               RET

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   ........           CALL    UART_sendstring_flash
   \   00000004   ....               RJMP    ?Subroutine21
    186          
    187          // Задание 7: через UART-интерфейс пользователь вводит адрес и значение ячейки,
    188          //			  которые заносятся во внешнюю EEPROM память AT24CXX

   \                                 In segment CODE, align 2, keep-with-next
    189          void ExecuteTask7()
   \                     ExecuteTask7:
    190          {
   \   00000000   ....               RCALL   ?Subroutine1
    191          	unsigned char addr, value;
    192          
    193          	UART_sendstring_flash( enterAddressStr );
    194          	addr = UART_receivevalue();
    195          	UART_sendstring_flash( enterValueStr );
   \                     ??CrossCallReturnLabel_4:
   \   00000002   ....               LDI     R16, LOW((enterAddressStr + 24))
   \   00000004   ....               LDI     R17, HIGH((enterAddressStr + 24))
   \   00000006   ....               RCALL   ?Subroutine8
    196          	value = UART_receivevalue();
    197          	
    198          	AT24CXX_write( addr, value );
   \                     ??CrossCallReturnLabel_50:
   \   00000008   2F10               MOV     R17, R16
   \   0000000A   2F08               MOV     R16, R24
   \   0000000C   ........           CALL    AT24CXX_write
    199          }
   \   00000010   ....               RJMP    ?Subroutine20

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   938A               ST      -Y, R24
   \   00000002   ....               LDI     R16, LOW(enterAddressStr)
   \   00000004   ....               LDI     R17, (enterAddressStr) >> 8
   \   00000006   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_47:
   \   00000008   2F80               MOV     R24, R16
   \   0000000A   9508               RET
    200          
    201          // Задание 8: через UART-интерфейс пользователь вводит адрес ячейки,
    202          //			  значение которой считывается из внешней EEPROM памяти AT24CXX
    203          //			  и выводиться в UART

   \                                 In segment CODE, align 2, keep-with-next
    204          void ExecuteTask8()
   \                     ExecuteTask8:
    205          {
   \   00000000   ....               RCALL   ?Subroutine1
    206          	unsigned char addr;
    207          	
    208          	UART_sendstring_flash( enterAddressStr );
    209          	addr = UART_receivevalue();
    210          
    211          	UART_sendstring_flash( valueStr );
   \                     ??CrossCallReturnLabel_5:
   \   00000002   ....               LDI     R16, LOW((enterAddressStr + 46))
   \   00000004   ....               LDI     R17, HIGH((enterAddressStr + 46))
   \   00000006   ....               RCALL   ?Subroutine18
    212          	UART_sendvalue( AT24CXX_read( addr ) );
   \                     ??CrossCallReturnLabel_41:
   \   00000008   2F08               MOV     R16, R24
   \   0000000A   ........           CALL    AT24CXX_read
   \   0000000E   ........           CALL    UART_sendvalue
    213          	UART_sendcrlf();	
   \   00000012   ....               RCALL   ?Subroutine13
    214          }
   \                     ??CrossCallReturnLabel_27:
   \   00000014   ....               RJMP    ?Subroutine20
    215          
    216          // Задание 9: в UART-интерфейс выводиться текущее значение температуры,
    217          //			  полученное из микрочхемы DS1820

   \                                 In segment CODE, align 2, keep-with-next
    218          void ExecuteTask9()
   \                     ExecuteTask9:
    219          {
   \   00000000   9725               SBIW    R29:R28, 5
    220          	char strTemp[ 5 ];
    221          
    222          	if( !DS1820_startconverttemp() )
   \   00000002   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_32:
   \   00000004   2300               TST     R16
   \   00000006   F421               BRNE    ??ExecuteTask9_0
    223          	{
    224          		UART_sendstring_flash( sensorNotConnectedStr );
   \   00000008   ....               LDI     R16, LOW((temperatureStr + 14))
   \   0000000A   ....               LDI     R17, HIGH((temperatureStr + 14))
   \   0000000C   ....               RCALL   ?Subroutine18
    225          		UART_sendcrlf();
   \                     ??CrossCallReturnLabel_42:
   \   0000000E   C00C               RJMP    ??CrossCallReturnLabel_22
    226          		return;
    227          	}
    228          
    229          	while( !DS1820_getconvertstatus() );
   \                     ??ExecuteTask9_0:
   \   00000010   ........           CALL    DS1820_getconvertstatus
   \   00000014   2300               TST     R16
   \   00000016   F3E1               BREQ    ??ExecuteTask9_0
    230          		
    231          	if( DS1820_gettemperature( strTemp ) )
   \   00000018   018E               MOVW    R17:R16, R29:R28
   \   0000001A   ........           CALL    DS1820_gettemperature
   \   0000001E   2300               TST     R16
   \   00000020   F021               BREQ    ??CrossCallReturnLabel_26
    232          	{
    233          		UART_sendstring_flash( temperatureStr );
   \   00000022   ....               LDI     R16, LOW(temperatureStr)
   \   00000024   ....               LDI     R17, (temperatureStr) >> 8
   \   00000026   ....               RCALL   ?Subroutine10
    234          		UART_sendstring( strTemp );
    235          		UART_sendcrlf();
   \                     ??CrossCallReturnLabel_22:
   \   00000028   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_26:
   \   0000002A   9625               ADIW    R29:R28, 5
   \   0000002C   9508               RET
    236          	}
    237          }

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   ........           JMP     DS1820_startconverttemp
    238          
    239          // Функция выводит на LCD приветственное сообщение

   \                                 In segment CODE, align 2, keep-with-next
    240          void OutputStartLCDMessage()
   \                     OutputStartLCDMessage:
    241          {
    242          	LCD_print_flash( LcdMessageLine1 );
   \   00000000   ....               LDI     R16, LOW(LcdMessageLine1)
   \   00000002   ....               LDI     R17, (LcdMessageLine1) >> 8
   \   00000004   ........           CALL    LCD_print_flash
    243          	LCD_gotoxy( 0, 1 );
   \   00000008   ....               RCALL   ?Subroutine2
    244          	LCD_print_flash( LcdMessageLine2 );
   \                     ??CrossCallReturnLabel_59:
   \   0000000A   ....               LDI     R16, LOW((LcdMessageLine1 + 17))
   \   0000000C   ....               LDI     R17, HIGH((LcdMessageLine1 + 17))
   \   0000000E   ........           JMP     LCD_print_flash
    245          }
    246          
    247          // Функция-обработчик прерывания, возникающего когда во входном буфере UART
    248          // имеются данные. 
    249          // В этой функции мы получаем номер задания и выполняем его.
    250          
    251          #pragma vector = UART_RXC_vect

   \                                 In segment CODE, align 2, keep-with-next
    252           __interrupt void UART0_RX_interrupt()
   \                     UART0_RX_interrupt:
    253          {
   \   00000000   938A               ST      -Y, R24
   \   00000002   93FA               ST      -Y, R31
   \   00000004   93EA               ST      -Y, R30
   \   00000006   923A               ST      -Y, R3
   \   00000008   922A               ST      -Y, R2
   \   0000000A   921A               ST      -Y, R1
   \   0000000C   920A               ST      -Y, R0
   \   0000000E   937A               ST      -Y, R23
   \   00000010   936A               ST      -Y, R22
   \   00000012   935A               ST      -Y, R21
   \   00000014   934A               ST      -Y, R20
   \   00000016   933A               ST      -Y, R19
   \   00000018   932A               ST      -Y, R18
   \   0000001A   931A               ST      -Y, R17
   \   0000001C   930A               ST      -Y, R16
   \   0000001E   B78F               IN      R24, 0x3F
    254          	unsigned char task;
    255          	task = UART_receivevalue();
    256          	
    257          	switch( task ) {
   \   00000020   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_49:
   \   00000022   ....               LDI     R30, LOW(`?<Jumptable for UART0_RX_interrupt>_0`)
   \   00000024   ....               LDI     R31, (`?<Jumptable for UART0_RX_interrupt>_0`) >> 8
   \   00000026   ........           JMP     ?CV_SWITCH_L06
    258          	case 1:
    259          		ExecuteTask1();
   \                     ??UART0_RX_interrupt_0:
   \   0000002A   ....               RCALL   ExecuteTask1
   \   0000002C   C00F               RJMP    ??UART0_RX_interrupt_1
    260          		break;
    261          	case 2:
    262          		ExecuteTask2();
   \                     ??UART0_RX_interrupt_2:
   \   0000002E   ....               RCALL   ExecuteTask2
   \   00000030   C00D               RJMP    ??UART0_RX_interrupt_1
    263          		break;
    264          	case 3:
    265          		ExecuteTask3();
   \                     ??UART0_RX_interrupt_3:
   \   00000032   ....               RCALL   ExecuteTask3
   \   00000034   C00B               RJMP    ??UART0_RX_interrupt_1
    266          		break;
    267          	case 4:
    268          		ExecuteTask4();
   \                     ??UART0_RX_interrupt_4:
   \   00000036   ....               RCALL   ExecuteTask4
   \   00000038   C009               RJMP    ??UART0_RX_interrupt_1
    269          		break;
    270          	case 5:
    271          		ExecuteTask5();
   \                     ??UART0_RX_interrupt_5:
   \   0000003A   ....               RCALL   ExecuteTask5
   \   0000003C   C007               RJMP    ??UART0_RX_interrupt_1
    272          		break;
    273          	case 6:
    274          		ExecuteTask6();
   \                     ??UART0_RX_interrupt_6:
   \   0000003E   ....               RCALL   ExecuteTask6
   \   00000040   C005               RJMP    ??UART0_RX_interrupt_1
    275          		break;
    276          	case 7:
    277          		ExecuteTask7();
   \                     ??UART0_RX_interrupt_7:
   \   00000042   ....               RCALL   ExecuteTask7
   \   00000044   C003               RJMP    ??UART0_RX_interrupt_1
    278          		break;
    279          	case 8:
    280          		ExecuteTask8();
   \                     ??UART0_RX_interrupt_8:
   \   00000046   ....               RCALL   ExecuteTask8
   \   00000048   C001               RJMP    ??UART0_RX_interrupt_1
    281          		break;
    282          	case 9:
    283          		ExecuteTask9();
   \                     ??UART0_RX_interrupt_9:
   \   0000004A   ....               RCALL   ExecuteTask9
    284          		break;
    285          	}
    286          	UART_sendstring_flash( enterTaskNumberStr );
   \                     ??UART0_RX_interrupt_1:
   \   0000004C   ....               LDI     R16, LOW((UartMessage + 83))
   \   0000004E   ....               LDI     R17, HIGH((UartMessage + 83))
   \   00000050   ....               RCALL   ?Subroutine18
    287          }
   \                     ??CrossCallReturnLabel_43:
   \   00000052   BF8F               OUT     0x3F, R24
   \   00000054   9109               LD      R16, Y+
   \   00000056   9119               LD      R17, Y+
   \   00000058   9129               LD      R18, Y+
   \   0000005A   9139               LD      R19, Y+
   \   0000005C   9149               LD      R20, Y+
   \   0000005E   9159               LD      R21, Y+
   \   00000060   9169               LD      R22, Y+
   \   00000062   9179               LD      R23, Y+
   \   00000064   9009               LD      R0, Y+
   \   00000066   9019               LD      R1, Y+
   \   00000068   9029               LD      R2, Y+
   \   0000006A   9039               LD      R3, Y+
   \   0000006C   91E9               LD      R30, Y+
   \   0000006E   91F9               LD      R31, Y+
   \   00000070   9189               LD      R24, Y+
   \   00000072   9518               RETI
    288          
    289          // Функция автономного режима, то есть режима, когда нет подключения к 
    290          // компьютеру через UART-интерфейс.
    291          // На LCD-экран выводятся:
    292          // 		в первой строке - текущая температура и текущее время
    293          //		во второй строке - текущая дата
    294          // LED индикаторы меняют свое состояние

   \                                 In segment CODE, align 2, keep-with-next
    295          void AutonomousMode()
   \                     AutonomousMode:
    296          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   9762               SBIW    R29:R28, 18
    297          	LCD_clrscr();
   \   00000006   ....               RCALL   ?Subroutine3
    298          	
    299          	static char strTemp[ 9 ] = { 0 };
    300          	LCD_gotoxy( 0, 0 );
   \                     ??CrossCallReturnLabel_7:
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   ....               RCALL   ?Subroutine22
    301          
    302          	switch( DS1820_gettemperature( strTemp ) ) {	// Получаем температуру 
   \                     ??CrossCallReturnLabel_55:
   \   0000000E   ....               LDI     R26, LOW(??strTemp)
   \   00000010   ....               LDI     R27, (??strTemp) >> 8
   \   00000012   018D               MOVW    R17:R16, R27:R26
   \   00000014   ........           CALL    DS1820_gettemperature
   \   00000018   2300               TST     R16
   \   0000001A   F019               BREQ    ??AutonomousMode_0
   \   0000001C   5002               SUBI    R16, 2
   \   0000001E   F021               BREQ    ??AutonomousMode_1
   \   00000020   C004               RJMP    ??CrossCallReturnLabel_31
    303          	case 0:											// Сенсор не подключен
    304          		strTemp[ 0 ] = 0;
   \                     ??AutonomousMode_0:
   \   00000022   E000               LDI     R16, 0
   \   00000024   930C               ST      X, R16
   \   00000026   C001               RJMP    ??CrossCallReturnLabel_31
    305          		break;
    306          	case 2:											// Данные не готовы
    307          		DS1820_startconverttemp();
   \                     ??AutonomousMode_1:
   \   00000028   ....               RCALL   ?Subroutine14
    308          		break;
    309          	}
    310          	LCD_print( strTemp );
   \                     ??CrossCallReturnLabel_31:
   \   0000002A   018D               MOVW    R17:R16, R27:R26
   \   0000002C   ....               RCALL   ?Subroutine15
    311          
    312          	char time[9] = { 0 };
   \                     ??CrossCallReturnLabel_35:
   \   0000002E   ....               LDI     R24, LOW(`?<Constant {'\\000'}>`)
   \   00000030   ....               LDI     R25, (`?<Constant {'\\000'}>`) >> 8
   \   00000032   018E               MOVW    R17:R16, R29:R28
   \   00000034   ....               RCALL   ?Subroutine12
    313          	DS1307_gettime(time);
   \                     ??CrossCallReturnLabel_24:
   \   00000036   ........           CALL    DS1307_gettime
    314          	
    315          	LCD_gotoxy( 6, 0 );
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   ....               RCALL   ?Subroutine6
    316          	LCD_print( time );
   \                     ??CrossCallReturnLabel_57:
   \   0000003E   018E               MOVW    R17:R16, R29:R28
   \   00000040   ....               RCALL   ?Subroutine15
    317          
    318          	
    319          	LCD_gotoxy( 0, 1 );
   \                     ??CrossCallReturnLabel_34:
   \   00000042   ....               RCALL   ?Subroutine2
    320          	char keyname = KEY_getkeyname( KEY_getkey() );
   \                     ??CrossCallReturnLabel_58:
   \   00000044   ........           CALL    KEY_getkey
   \   00000048   ....               RCALL   ?Subroutine4
    321          	if( keyname != 0 )
   \                     ??CrossCallReturnLabel_10:
   \   0000004A   2300               TST     R16
   \   0000004C   F011               BREQ    ??AutonomousMode_2
    322          		LCD_printchar( keyname );
   \   0000004E   ........           CALL    LCD_printchar
    323          	
    324          	
    325          	char date[9] = { 0 };
   \                     ??AutonomousMode_2:
   \   00000052   019E               MOVW    R19:R18, R29:R28
   \   00000054   5F27               SUBI    R18, 247
   \   00000056   4F3F               SBCI    R19, 255
   \   00000058   9609               ADIW    R25:R24, 9
   \   0000005A   0189               MOVW    R17:R16, R19:R18
   \   0000005C   ....               RCALL   ?Subroutine12
    326          	DS1307_getdate(date);
   \                     ??CrossCallReturnLabel_25:
   \   0000005E   ....               RCALL   ?Subroutine9
    327          
    328          	LCD_gotoxy( 6, 1 );
   \                     ??CrossCallReturnLabel_20:
   \   00000060   E011               LDI     R17, 1
   \   00000062   ....               RCALL   ?Subroutine6
    329          	LCD_print( date );
   \                     ??CrossCallReturnLabel_56:
   \   00000064   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_37:
   \   00000066   ....               RCALL   ?Subroutine15
    330          	
    331          	static unsigned char ledCount = 0;
    332          	if( ledCount % 3 == 0 )							// Чтобы индикаторы слишком
   \                     ??CrossCallReturnLabel_33:
   \   00000068   01FD               MOVW    R31:R30, R27:R26
   \   0000006A   8501               LDD     R16, Z+9
   \   0000006C   E043               LDI     R20, 3
   \   0000006E   ........           CALL    ?UC_DIVMOD_L01
   \   00000072   2344               TST     R20
   \   00000074   F479               BRNE    ??AutonomousMode_3
    333          	{												// часто не мигали, меняем
    334          		LED1_PORT = !LED1_PORT;						// их состояние один раз на
   \   00000076   B308               IN      R16, 0x18
   \   00000078   FF00               SBRS    R16, 0
   \   0000007A   9AC0               SBI     0x18, 0x00
   \                     ??AutonomousMode_4:
   \   0000007C   FD00               SBRC    R16, 0
   \   0000007E   98C0               CBI     0x18, 0x00
    335          		LED2_PORT = !LED2_PORT;						// три вызова функции
   \                     ??AutonomousMode_5:
   \   00000080   B308               IN      R16, 0x18
   \   00000082   FF01               SBRS    R16, 1
   \   00000084   9AC1               SBI     0x18, 0x01
   \                     ??AutonomousMode_6:
   \   00000086   FD01               SBRC    R16, 1
   \   00000088   98C1               CBI     0x18, 0x01
    336          		LED3_PORT = !LED3_PORT;
   \                     ??AutonomousMode_7:
   \   0000008A   B302               IN      R16, 0x12
   \   0000008C   FF05               SBRS    R16, 5
   \   0000008E   9A95               SBI     0x12, 0x05
   \                     ??AutonomousMode_8:
   \   00000090   FD05               SBRC    R16, 5
   \   00000092   9895               CBI     0x12, 0x05
    337          	}
    338          	ledCount++;
   \                     ??AutonomousMode_3:
   \   00000094   01FD               MOVW    R31:R30, R27:R26
   \   00000096   8501               LDD     R16, Z+9
   \   00000098   9503               INC     R16
   \   0000009A   8701               STD     Z+9, R16
    339          }
   \   0000009C   9662               ADIW    R29:R28, 18
   \   0000009E   E0E4               LDI     R30, 4
   \   000000A0   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   ........           JMP     LCD_print

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   01FC               MOVW    R31:R30, R25:R24
   \   00000002   E049               LDI     R20, 9
   \   00000004   E050               LDI     R21, 0
   \   00000006   ........           JMP     ?ML_FLASH_SRAM_16EC_16_L07

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   E006               LDI     R16, 6
   \   00000002   ....               RJMP    ?Subroutine22

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??strTemp:
   \   00000000                      DS 9
   \   00000009                      DS 1
    340          
    341          // Главная функция программы
    342          // Производится инициализация устройств, вывод сообщения на LCD-экран, а также
    343          // вывод сообщения в UART-интерфейс
    344          // Также включается зуммер на 0.5 с
    345          // В бесконечном цикле выполняется функция автономного режима

   \                                 In segment CODE, align 2, keep-with-next
    346          int main()
   \                     main:
    347          {
    348          	LED1_DDR = 1;
   \   00000000   9AB8               SBI     0x17, 0x00
    349          	LED2_DDR = 1;
   \   00000002   9AB9               SBI     0x17, 0x01
    350          	LED3_DDR = 1;
   \   00000004   9A8D               SBI     0x11, 0x05
    351          	
    352          	I2C_init();
   \   00000006   ........           CALL    I2C_init
    353          	SPI_init();
   \   0000000A   ........           CALL    SPI_init
    354          	LCD_init();
   \   0000000E   ........           CALL    LCD_init
    355          	LCD_clrscr();
   \   00000012   ....               RCALL   ?Subroutine3
    356          
    357          	UART_init( CALC_UBRR( 57600 ) );
   \                     ??CrossCallReturnLabel_6:
   \   00000014   E00F               LDI     R16, 15
   \   00000016   E010               LDI     R17, 0
   \   00000018   ........           CALL    UART_init
    358          	__enable_interrupt();
   \   0000001C   9478               SEI
    359          
    360          	DS1820_startconverttemp();
   \   0000001E   ....               RCALL   ?Subroutine14
    361          	
    362          	UART_sendstring_flash( UartMessage );
   \                     ??CrossCallReturnLabel_30:
   \   00000020   ....               LDI     R16, LOW(UartMessage)
   \   00000022   ....               LDI     R17, (UartMessage) >> 8
   \   00000024   ....               RCALL   ?Subroutine18
    363          	OutputStartLCDMessage();
   \                     ??CrossCallReturnLabel_44:
   \   00000026   ....               RCALL   OutputStartLCDMessage
    364          
    365          	UART_sendstring_flash( enterTaskNumberStr );
   \   00000028   ....               LDI     R16, LOW((UartMessage + 83))
   \   0000002A   ....               LDI     R17, HIGH((UartMessage + 83))
   \   0000002C   ....               RCALL   ?Subroutine18
    366          
    367          	Beep( 500 );
   \                     ??CrossCallReturnLabel_45:
   \   0000002E   EF04               LDI     R16, 244
   \   00000030   E011               LDI     R17, 1
   \   00000032   ........           CALL    Beep
    368          
    369          	DELAY_MS( 1000 );
   \   00000036   E201               LDI     R16, 33
   \   00000038   E217               LDI     R17, 39
   \                     ??main_0:
   \   0000003A   ........           CALL    delay_func_ms
    370          
    371          	while(1) 
    372          	{
    373          		AutonomousMode();
   \   0000003E   ....               RCALL   AutonomousMode
    374          		DELAY_MS( 200 );
   \   00000040   ED03               LDI     R16, 211
   \   00000042   E017               LDI     R17, 7
   \   00000044   CFFA               RJMP    ??main_0
    375          	}
    376            
    377          }

   \                                 In segment INTVEC, offset 0x4c, root
   \                     `??UART0_RX_interrupt??INTVEC 76`:
   \   0000004C   ........           JMP     UART0_RX_interrupt

   \                                 In segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for UART0_RX_interrupt>_0`:
   \   00000000   01                 DB      1
   \   00000001   00                 DB      0
   \   00000002   ....               DW      (??UART0_RX_interrupt_1) /2
   \   00000004   0009               DW      9
   \   00000006   ....               DW      (??UART0_RX_interrupt_0) /2
   \   00000008   ....               DW      (??UART0_RX_interrupt_2) /2
   \   0000000A   ....               DW      (??UART0_RX_interrupt_3) /2
   \   0000000C   ....               DW      (??UART0_RX_interrupt_4) /2
   \   0000000E   ....               DW      (??UART0_RX_interrupt_5) /2
   \   00000010   ....               DW      (??UART0_RX_interrupt_6) /2
   \   00000012   ....               DW      (??UART0_RX_interrupt_7) /2
   \   00000014   ....               DW      (??UART0_RX_interrupt_8) /2
   \   00000016   ....               DW      (??UART0_RX_interrupt_9) /2

   \                                 In segment NEAR_F, align 1, keep-with-next
   \                     `?<Constant {'\\000'}>`:
   \   00000000   000000000000       DB 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000      
   \   00000009   000000000000       DB 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000      

   Maximum stack usage in bytes:

     Function                     CSTACK RSTACK
     --------                     ------ ------
     AutonomousMode                  22      4
       -> LCD_clrscr                 22      2
       -> LCD_gotoxy                 22      2
       -> DS1820_gettemperature      22      2
       -> DS1820_startconverttemp    22      2
       -> LCD_print                  22      2
       -> DS1307_gettime             22      2
       -> LCD_gotoxy                 22      2
       -> LCD_print                  22      2
       -> LCD_gotoxy                 22      2
       -> KEY_getkey                 22      2
       -> KEY_getkeyname             22      2
       -> LCD_printchar              22      2
       -> DS1307_getdate             22      2
       -> LCD_gotoxy                 22      2
       -> LCD_print                  22      2
     ExecuteTask1                     2      2
       -> LCD_clrscr                  2      2
       -> KEY_getkey                  2      2
       -> KEY_getkeyname              2      2
       -> LCD_printchar               2      2
       -> LCD_gotoxy                  2      2
       -> LCD_clrscr                  2      2
       -> KEY_waitforkeyrelease       2      2
     ExecuteTask2                     1      2
       -> KEY_getkey                  1      2
       -> KEY_getkeyname              1      2
       -> LED7_setdigit               1      2
       -> KEY_waitforkeyrelease       1      2
     ExecuteTask3                     1      2
       -> KEY_getkey                  1      2
       -> Beep                        1      2
       -> KEY_waitforkeyrelease       1      2
     ExecuteTask4                     1      2
       -> KEY_getkey                  1      2
       -> KEY_getkeyname              1      2
       -> KEY_waitforkeyrelease       1      2
     ExecuteTask5                    18      2
       -> DS1307_gettime             18      2
       -> DS1307_getdate             18      2
       -> UART_sendstring_flash      18      2
       -> UART_sendstring            18      2
       -> UART_sendcrlf              18      2
       -> UART_sendstring_flash      18      2
       -> UART_sendstring            18      2
       -> UART_sendcrlf              18      2
     ExecuteTask6                     2      2
       -> UART_sendstring_flash       2      2
       -> UART_receivevalue           2      2
       -> UART_sendstring_flash       2      2
       -> UART_receivevalue           2      2
       -> UART_sendstring_flash       2      2
       -> UART_receivevalue           2      2
       -> DS1307_settime              2      2
       -> UART_sendstring_flash       2      2
       -> UART_receivevalue           2      2
       -> UART_sendstring_flash       2      2
       -> UART_receivevalue           2      2
       -> UART_sendstring_flash       2      2
       -> UART_receivevalue           2      2
       -> DS1307_setdate              2      2
     ExecuteTask7                     1      2
       -> UART_sendstring_flash       1      2
       -> UART_receivevalue           1      2
       -> UART_sendstring_flash       1      2
       -> UART_receivevalue           1      2
       -> AT24CXX_write               1      2
     ExecuteTask8                     1      2
       -> UART_sendstring_flash       1      2
       -> UART_receivevalue           1      2
       -> UART_sendstring_flash       1      2
       -> AT24CXX_read                1      2
       -> UART_sendvalue              1      2
       -> UART_sendcrlf               1      2
     ExecuteTask9                     5      2
       -> DS1820_startconverttemp     5      2
       -> UART_sendstring_flash       5      2
       -> UART_sendcrlf               5      2
       -> DS1820_getconvertstatus     5      2
       -> DS1820_gettemperature       5      2
       -> UART_sendstring_flash       5      2
       -> UART_sendstring             5      2
       -> UART_sendcrlf               5      2
     OutputStartLCDMessage            0      2
       -> LCD_print_flash             0      2
       -> LCD_gotoxy                  0      2
       -> LCD_print_flash             0      2
     UART0_RX_interrupt              15      2
       -> UART_receivevalue          15      2
       -> ExecuteTask1               15      2
       -> ExecuteTask2               15      2
       -> ExecuteTask3               15      2
       -> ExecuteTask4               15      2
       -> ExecuteTask5               15      2
       -> ExecuteTask6               15      2
       -> ExecuteTask7               15      2
       -> ExecuteTask8               15      2
       -> ExecuteTask9               15      2
       -> UART_sendstring_flash      15      2
     main                             0      2
       -> I2C_init                    0      2
       -> SPI_init                    0      2
       -> LCD_init                    0      2
       -> LCD_clrscr                  0      2
       -> UART_init                   0      2
       -> DS1820_startconverttemp     0      2
       -> UART_sendstring_flash       0      2
       -> OutputStartLCDMessage       0      2
       -> UART_sendstring_flash       0      2
       -> Beep                        0      2
       -> delay_func_ms               0      2
       -> AutonomousMode              0      2
       -> delay_func_ms               0      2


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _A_PORTB                          1
     _A_DDRB                           1
     _A_PORTD                          1
     _A_DDRD                           1
     UartMessage                     103
     LcdMessageLine1                  29
     timeStr                          14
     enterAddressStr                  54
     temperatureStr                   38
     enterHourStr                     82
     ExecuteTask1                     50
     ?Subroutine19                     6
     ?Subroutine5                      4
     ?Subroutine0                     10
     ?Subroutine4                      4
     ?Subroutine2                      4
     ?Subroutine22                     4
     ?Subroutine3                      4
     ExecuteTask2                     22
     ?Subroutine20                     4
     ExecuteTask3                     22
     ExecuteTask4                     62
     ExecuteTask5                     36
     ?Subroutine13                     4
     ?Subroutine18                     4
     ?Subroutine10                     8
     ?Subroutine16                     8
     ?Subroutine9                      6
     ExecuteTask6                     58
     ?Subroutine8                      2
     ?Subroutine21                     4
     ?Subroutine7                     10
     ?Subroutine17                     6
     ExecuteTask7                     18
     ?Subroutine1                     12
     ExecuteTask8                     22
     ExecuteTask9                     46
     ?Subroutine14                     4
     OutputStartLCDMessage            18
     UART0_RX_interrupt              116
     AutonomousMode                  164
     ?Subroutine15                     4
     ?Subroutine12                    10
     ?Subroutine6                      4
     strTemp                          10
     main                             70
     ??UART0_RX_interrupt??INTVEC 76
                                       4
     ?<Jumptable for UART0_RX_interrupt>_0
                                      24
     ?<Constant {'\000'}>             18
      Others                           6

 
   4 bytes in segment ABSOLUTE
 830 bytes in segment CODE
   6 bytes in segment INITTAB
   4 bytes in segment INTVEC
 338 bytes in segment NEAR_F
  10 bytes in segment NEAR_Z
  24 bytes in segment SWITCH
 
 1 192 bytes of CODE memory (+ 10 bytes shared)
    10 bytes of DATA memory (+  4 bytes shared)

Errors: none
Warnings: none
